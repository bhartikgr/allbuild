{"version":3,"file":"static/js/1378.706e9cc8.chunk.js","mappings":";mUAiBe,SAASA,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAS,IAC9CC,EAAmBC,IAAwBF,EAAAA,EAAAA,UAAS,KACpDG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,KACtCK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAS,KAC1CO,EAAeC,IAAoBR,EAAAA,EAAAA,UAAS,KAC5CS,EAAiBC,IAAsBV,EAAAA,EAAAA,UAAS,KAChDW,EAAeC,IAAoBZ,EAAAA,EAAAA,WAAS,IAC5Ca,EAASC,IAAcd,EAAAA,EAAAA,WAAS,IAChCe,EAAYC,IAAiBhB,EAAAA,EAAAA,WAAS,IACtCiB,EAAYC,IAAiBlB,EAAAA,EAAAA,UAAS,KACtCmB,EAAQC,IAAapB,EAAAA,EAAAA,UAAS,KAC9BqB,EAAeC,IAAoBtB,EAAAA,EAAAA,UAAS,KAC5CuB,EAAoBC,IAAyBxB,EAAAA,EAAAA,WAAS,IACtDyB,EAAWC,IAAgB1B,EAAAA,EAAAA,WAAS,IACpC2B,EAAYC,IAAe5B,EAAAA,EAAAA,UAAS,KACpC6B,EAAWC,IAAgB9B,EAAAA,EAAAA,WAAS,IACpC+B,EAAmBC,IAAwBhC,EAAAA,EAAAA,UAAS,IACpDiC,EAAaC,KAAkBlC,EAAAA,EAAAA,UAAS,KACxCmC,GAAaC,KAAkBpC,EAAAA,EAAAA,UAAS,KACxCqC,GAAaC,KAAkBtC,EAAAA,EAAAA,UAAS,KACxCuC,GAAaC,KAAkBxC,EAAAA,EAAAA,UAAS,KACxCyC,GAAWC,KAAgB1C,EAAAA,EAAAA,UAAS,OACpC2C,GAAiBC,KAAsB5C,EAAAA,EAAAA,WAAS,IAChD6C,GAASC,KAAc9C,EAAAA,EAAAA,UAAS,KAChC+C,GAAOC,KAAYhD,EAAAA,EAAAA,UAAS,KAC5BiD,GAAQC,KAAalD,EAAAA,EAAAA,UAAS,OAC/B,GAAEmD,KAAOC,EAAAA,EAAAA,MACRC,GAAWC,KAAgBtD,EAAAA,EAAAA,UAAS,KAGpCuD,GAAQC,KAAaxD,EAAAA,EAAAA,UAAS,KAC9ByD,GAAaC,KAAkB1D,EAAAA,EAAAA,UAAS,KACxC2D,GAAUC,KAAe5D,EAAAA,EAAAA,UAAS,KAClC6D,GAAcC,KAAmB9D,EAAAA,EAAAA,UAAS,GAG3C+D,GAAiBC,aAAaC,QAAQ,aACtCC,GAAYH,GAAiBI,KAAKC,MAAML,IAAkB,KAChEM,QAAQC,IAAIJ,GAAUf,GAAIA,KAM1BoB,EAAAA,EAAAA,YAAU,KAGNC,SAASC,KAAKC,MAAMC,UAFlB9C,EAE8B,SAGA,OAI3B,KACL2C,SAASC,KAAKC,MAAMC,UAAY,MAAM,IAEvC,CAAC9C,IACJ,IAAI+C,GAAS,6CACbL,EAAAA,EAAAA,YAAU,KACR,MAAMR,EAAiBC,aAAaC,QAAQ,aACtCC,EAAYH,EAAiBI,KAAKC,MAAML,GAAkB,KAChErB,GAAawB,EAAU,GACtB,KAEHK,EAAAA,EAAAA,YAAU,KACJpB,IACF0B,GAAqB1B,GACvB,GACC,CAACA,MACJoB,EAAAA,EAAAA,YAAU,KACJpB,IACF2B,GAAkB3B,GACpB,GACC,CAACA,KACJ,MAAM2B,GAAoBC,UACxB,MAAMhB,EAAiBC,aAAaC,QAAQ,aAE5C,IAAIe,EAAW,CACbC,SAFgBlB,EAAiBI,KAAKC,MAAML,GAAkB,MAE3CZ,GACnB+B,QAAS/B,GAEXkB,QAAQC,IAAIU,GACZ,IAUE,GAAyB,KAFrBG,SAPcC,EAAAA,EAAMC,KAAKT,GAAS,uBAAwBI,EAAU,CACtEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,uBAIJC,MAENC,IAAIC,OACZ,IAQE,IAAIP,SAPcC,EAAAA,EAAMC,KAAKT,GAAS,oBAAqBI,EAAU,CACnEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,uBAIJC,KAChBnB,QAAQC,IAAIa,GACS,MAAjBA,EAAMQ,QACR/F,EAAS,aAEb,CAAE,MAAOgG,GAEHA,EAAIC,SACNxB,QAAQtB,MAAM,kBAAmB6C,EAAIC,UAC5BD,EAAIE,QACbzB,QAAQtB,MAAM,iBAAkB6C,EAAIE,SAEpCzB,QAAQtB,MAAM,iBAAkB6C,EAAIG,QAExC,CAEJ,CAAE,MAAOH,GAEHA,EAAIC,SACNxB,QAAQtB,MAAM,kBAAmB6C,EAAIC,UAC5BD,EAAIE,QACbzB,QAAQtB,MAAM,iBAAkB6C,EAAIE,SAEpCzB,QAAQtB,MAAM,iBAAkB6C,EAAIG,QAExC,GAEIlB,GAAuBE,UAC3B,MAAMhB,EAAiBC,aAAaC,QAAQ,aAE5C,IAAIe,EAAW,CACbC,SAFgBlB,EAAiBI,KAAKC,MAAML,GAAkB,MAE3CZ,GACnB6C,SAAU7C,GAGZ,IAOE,IAAIgC,SANcC,EAAAA,EAAMC,KAAKT,GAAS,uBAAwBI,EAAU,CACtEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,uBAGJC,KAEhB,GADAnB,QAAQC,IAAIa,EAAMc,SACdd,EAAMc,QAAQP,OAAS,EAAG,CAC5BtE,EAAU+D,EAAMc,QAAQ,GAAGC,MAC3B5C,GAAa6B,EAAMc,QAAQ,GAAGE,MAC9B3C,GAAU2B,EAAMc,QAAQ,GAAGhB,SAC3BzE,EAAiB2E,EAAMc,QAAQ,GAAGE,MAClC,IACIC,EAAS,GAETC,EAAQ,GAEZlB,EAAMc,QAAQK,SAASC,IACrB,IACE,MAAMC,EAAarC,KAAKC,MAAMmC,EAAKtD,QAE/BwD,MAAMC,QAAQF,IAChBA,EAAWF,SAASK,IAElB,MAAMC,EAAW,CACfC,IAAKF,EACLxD,GAAIoD,EAAKL,KACTY,KAAM,KACNC,YAAaR,EAAKQ,aAIhBH,GACFP,EAAMW,KAAKJ,EACb,GAGN,CAAE,MAAO7D,IACPsB,QAAQtB,MAAM,6BAA8BA,GAC9C,KAEFsB,QAAQC,IAAIa,EAAMc,SAClB3D,GAAe+D,GACf7D,GAAe4D,GACftC,GAAgB,EAClB,CAGF,CAAE,MAAO8B,GAEHA,EAAIC,UACGD,EAAIE,OAKjB,GA+DImB,GAAYA,CAACT,EAAYU,KAC7BhF,GAAesE,GACfxE,EAAqBkF,GACrBpF,GAAa,EAAK,GAEd,EAAEqF,KAAMC,EAAAA,EAAAA,OAEd7C,EAAAA,EAAAA,YAAU,KACR,MAAM8C,EAAgBrD,aAAaC,QAAQ,aAAe,KAKtDqD,EAAAA,EAAKC,WAAaF,GACpBC,EAAAA,EAAKE,eAAeH,EACtB,GACC,CAACC,EAAAA,EAAMH,KACV,MAqBMM,GAAkB1C,UACtBjC,GAAW4E,GACXlG,GAAsB,GACtBF,EAAiB,qCAAqC,EAmClDqG,GAAkB5C,UACtBnE,GAAiB,GACjB,MAAMmD,EAAiBC,aAAaC,QAAQ,aACtCC,EAAYH,EAAiBI,KAAKC,MAAML,GAAkB,KAChE,IAAIiB,EAAW,CACb7B,GAAIA,GACJ8B,QAASf,EAAUf,IAErB7C,EAAgB+E,GAChB,IACE,MAAMuC,QAAYxC,EAAAA,EAAMC,KAAKT,GAAS,oBAAqBI,EAAU,CACnEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAGpB7E,EAAmBkH,EAAIpC,KAAKS,QAC9B,CAAE,MAAOL,GACHA,EAAIC,SACNxB,QAAQtB,MAAM,yBAA0B6C,EAAIC,SAASL,MAC5CI,EAAIE,QACbzB,QAAQtB,MAAM,wBAAyB6C,EAAIE,SAE3CzB,QAAQtB,MAAM,iBAAkB6C,EAAIG,QAExC,GAWI8B,GAAmBA,KACvBjF,IAAmB,GACnBhC,GAAiB,EAAM,GAkHlBkH,GAAUC,KAAe/H,EAAAA,EAAAA,WAAS,GACnCgI,GAAcd,IAClBa,GAAYD,KAAaZ,EAAQ,KAAOA,EAAM,GAIzCe,GAAWC,KAAgBlI,EAAAA,EAAAA,UAAS,OACpCmI,GAAeC,KAAoBpI,EAAAA,EAAAA,UAAS,OAC5CqI,GAAeC,KAAoBtI,EAAAA,EAAAA,WAAS,IAC5CuI,GAAmBC,KAAwBxI,EAAAA,EAAAA,UAAS,IAKrDyI,GAAcA,KAClBH,IAAiB,GACjB9D,SAASC,KAAKC,MAAMC,UAAY,QAAQ,EAEpC+D,GAAuB3D,MAAO5B,EAAIwF,EAAMzB,KAC5CxD,GAAeP,GACfS,GAAY+E,GACZ7E,GAAgBoD,GAChB,MAAMnD,EAAiBC,aAAaC,QAAQ,aAC1BF,GAAiBI,KAAKC,MAAML,GAC9C,IAAIiB,EAAW,CACb2D,KAAMA,EACNxF,GAAIA,EACJ8B,QAAS1B,IAEX,IACE,MAMMqF,SANYxD,EAAAA,EAAMC,KAAKT,GAAS,mBAAoBI,EAAU,CAClEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,uBAGEC,MAEI,IAAtBoD,EAAUC,UACZX,GAAaU,EAAU3C,SACvBmC,GAAiBO,GAEjBG,GAAsBH,EAAMxF,GAC5BsF,KAEJ,CAAE,MAAO7C,GAAM,GAEXkD,GAAwB/D,MAAO4D,EAAMxF,KACzC,MAAMY,EAAiBC,aAAaC,QAAQ,aAC1BF,GAAiBI,KAAKC,MAAML,GAC9C,IAAIiB,EAAW,CACb2D,KAAMA,EACNxF,GAAIA,EACJ8B,QAAS1B,IAEX,IACE,MAMMqF,SANYxD,EAAAA,EAAMC,KAAKT,GAAS,wBAAyBI,EAAU,CACvEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,uBAGEC,KACtBnB,QAAQC,IAAIsE,EAAUG,OACtBP,GAAqBI,EAAUG,MAAMC,SACvC,CAAE,MAAOpD,GAAM,GAgDXqD,IAAeC,EAAAA,EAAAA,QAAO,MAW5B,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,IACTzJ,IAAkBwJ,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACzD,QAAS9F,KACxCqJ,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CACVC,QAASnI,EACToI,SA/PoBC,KACxBpI,GAAsB,EAAM,EA+PxBuE,QAAS1E,EACTwI,aA9Pe9E,UAzFIA,WACvB,MAAMhB,EAAiBC,aAAaC,QAAQ,aAE5C,IAAIe,EAAW,CACbC,SAFgBlB,EAAiBI,KAAKC,MAAML,GAAkB,MAE3CZ,GACnB2G,MAAOjH,GACPM,GAAIhC,GAGN,WACoBiE,EAAAA,EAAMC,KAAKT,GAAS,qBAAsBI,EAAU,CACpEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,uBAGJC,KAChBhE,GAAsB,GACtBqD,GAAqB1B,GACvB,CAAE,MAAOyC,GAAM,GAuEfmE,EAAkB,KA+PhBT,EAAAA,EAAAA,KAAA,WAASU,UAAU,uBAAsBX,UACvCF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,eAAcX,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,gBAAeX,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,WAAUX,SAAA,EACvBC,EAAAA,EAAAA,KAAA,MAAIU,UAAU,YAAWX,SAAE,GAAGlC,GAAE,eAChCgC,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CAAQ,IAAEhG,GAAU,WAEtBiG,EAAAA,EAAAA,KAAA,OAAKU,UAAU,WAAUX,UACvBC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,wCAGnBV,EAAAA,EAAAA,KAAA,OAAKU,UAAU,MAAKX,UAClBC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,SAAQX,UACrBF,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAAAZ,SAAA,EACHC,EAAAA,EAAAA,KAACY,EAAAA,GAAO,CAAAb,UACNF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,0DAAyDX,SAAA,EACtEF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,kCAAiCX,SAAA,EAC9CC,EAAAA,EAAAA,KAACa,EAAAA,GAAG,CAAAd,SAAE,GAAGlC,GAAE,cACXmC,EAAAA,EAAAA,KAAA,UACExC,KAAK,SACLsD,QAASA,IAAMxK,EAAS,WAAW2D,MACnCyG,UAAU,cAAaX,SACxB,aAKHC,EAAAA,EAAAA,KAAA,UACEU,UAAU,4CACVlD,KAAK,SACLsD,QA3RCC,KACnBzH,IAAmB,EAAK,EA0RgByG,SAErBlC,GAAE,kBAKTmC,EAAAA,EAAAA,KAACgB,EAAAA,GAAQ,CAAAjB,UACPC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,WAAUX,SACtBhH,GAAYqD,OAAS,EACpBrD,GAAYkI,KAAI,CAAClF,EAAM6B,KACrBoC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,WAAUX,UACvBC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,2BAA0BX,UACvCF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,oCAAmCX,SAAA,EAEhDC,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CACZR,UAAU,eACVnD,IAAKxB,EAAKwB,IACVuD,QAASA,IACP1B,GAAqBrD,EAAKlC,GAAIkC,EAAKwB,IAAKK,KAK3C7B,EAAKwB,MAAQxB,EAAK0B,cACjBuC,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGnF,GAAUf,KAAOI,KAChB+F,EAAAA,EAAAA,KAAA,OAAKU,UAAU,+CAA8CX,UAC3DF,EAAAA,EAAAA,MAAA,OACEzE,MAAO,CACL+F,SAAU,WACVC,QAAS,gBAEXV,UAAU,gEAA+DX,SAAA,CAExEhE,EAAKwB,MAAQxB,EAAK0B,cACjBuC,EAAAA,EAAAA,KAAA,UACEU,UAAU,OACVlD,KAAK,SACL6D,MAAOxD,GAAE,eAAekC,UAExBC,EAAAA,EAAAA,KAACsB,EAAAA,EAAc,OAGnBtB,EAAAA,EAAAA,KAAA,UACEU,UAAU,cACVI,QAASA,IAAMpC,GAAWd,GAAOmC,UAEjCC,EAAAA,EAAAA,KAACuB,EAAAA,IAAc,MAIhB/C,KAAaZ,IACZiC,EAAAA,EAAAA,MAAA,MAAIa,UAAU,mBAAkBX,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MACEc,QAASA,IACP3C,GAAgBpC,EAAKwB,KACtBwC,SAEAlC,GAAE,aAELmC,EAAAA,EAAAA,KAAA,MACEc,QAASA,IACPzC,GAAgBtC,EAAKwB,KACtBwC,SAEAlC,GAAE,uBASlB9B,EAAKwB,KAAOxB,EAAK0B,cAChBuC,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGnF,GAAUf,KAAOI,KAChB+F,EAAAA,EAAAA,KAAA,OAAKU,UAAU,+CAA8CX,UAC3DF,EAAAA,EAAAA,MAAA,OACEzE,MAAO,CACL+F,SAAU,WACVC,QAAS,gBAEXV,UAAU,yDAAwDX,SAAA,EAElEC,EAAAA,EAAAA,KAAA,UACEU,UAAU,cACVI,QAASA,IAAMpC,GAAWd,GAAOmC,UAEjCC,EAAAA,EAAAA,KAACuB,EAAAA,IAAc,MAIhB/C,KAAaZ,IACZiC,EAAAA,EAAAA,MAAA,MAAIa,UAAU,mBAAkBX,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MACEc,QAASA,IACP3C,GAAgBpC,EAAKwB,KACtBwC,SAEAlC,GAAE,aAELmC,EAAAA,EAAAA,KAAA,MACEc,QAASA,IACPzC,GAAgBtC,EAAKwB,KACtBwC,SAEAlC,GAAE,6BAjGMD,MAgHjCiC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAI,GAAGlC,GAAE,wBAAwB,YAIvCmC,EAAAA,EAAAA,KAACgB,EAAAA,GAAQ,CAAAjB,UACPC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,WAAUX,SACtB9G,GAAYmD,OAAS,EACpBnD,GAAYgI,KAAI,CAAClF,EAAM6B,KACrBoC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,WAAUX,UACvBC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,2BAA0BX,UACvCF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,kBAAiBX,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,SACEiB,QAASA,IAAMnD,GAAU1E,GAAa2E,GACtC4D,UAAQ,EACRC,IAAI,QAAO1B,SAAA,EAEXC,EAAAA,EAAAA,KAAA,UAAQ0B,IAAK3F,EAAMyB,KAAK,cACvB,GAAGK,GAAE,2BAERmC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,yCAAwCX,UACrDF,EAAAA,EAAAA,MAAA,OACEzE,MAAO,CACL+F,SAAU,WACVC,QAAS,gBACTrB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UACEU,UAAU,cACVI,QAASA,IAAMpC,GAAWd,GAAOmC,UAEjCC,EAAAA,EAAAA,KAACuB,EAAAA,IAAc,MAGhB/C,KAAaZ,IACZiC,EAAAA,EAAAA,MAAA,MAAIa,UAAU,mBAAkBX,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,MAAIiB,QAASA,IAAM3C,GAAgBpC,GAAMgE,SAAA,CACtC,IACAlC,GAAE,cAELmC,EAAAA,EAAAA,KAAA,MAAIc,QAASA,IAAMzC,GAAgBtC,GAAMgE,SACtClC,GAAE,2BAhCYD,MA2CjCiC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAI,GAAGlC,GAAE,wBAAwB,YAIvCmC,EAAAA,EAAAA,KAACgB,EAAAA,GAAQ,CAAAjB,UACPF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,WAAUX,SAAA,EAEpB5H,GAAaU,GAAYuD,OAAS,EAC/BvD,GAAYoI,KAAI,CAACxB,EAAO7B,KACtBoC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,WAAUX,UACvBC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,2BAA0BX,UACvCF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,kBAAiBX,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OACE0B,IAAKjC,EAAMkC,IACXF,IAAI,QACJX,QAASA,IAjoBvBrF,WAClB,IAAIC,EAAW,CACbgB,SAAUA,GAGZ,IACE,MAAM4B,QAAYxC,EAAAA,EAAMC,KAAKT,GAAS,eAAgBI,EAAU,CAC9DM,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAIpB,GAAIqC,GAAOA,EAAIpC,MAAQoC,EAAIpC,KAAKS,QAAS,CACvC,MAGMiF,EAHStD,EAAIpC,KAAKS,QAGIsE,KAAKhE,IAC/B,IAAIC,EAAa,GAGjB,GACED,EAAKtD,QACW,cAAhBsD,EAAKtD,QACW,KAAhBsD,EAAKtD,OAEL,IACEuD,EAAarC,KAAKC,MAAMmC,EAAKtD,OAC/B,CAAE,MAAOkI,GACP9G,QAAQtB,MAAM,iCAAkCwD,EAAKpD,GAAIgI,GACzD3E,EAAa,EACf,CAUF,MAAO,CACL4E,WAPiB5E,EAAW6E,QAC3BhF,GACCA,EAAMiF,MAAM,gCACZjF,EAAMiF,MAAM,qDAKf,IAEH5J,GAAa,GAGbE,EAAYsJ,EACd,CACF,CAAE,MAAOtF,GACHA,EAAIC,SACNxB,QAAQtB,MAAM,yBAA0B6C,EAAIC,SAASL,MAC5CI,EAAIE,QACbzB,QAAQtB,MAAM,wBAAyB6C,EAAIE,SAE3CzB,QAAQtB,MAAM,iBAAkB6C,EAAIG,QAExC,GAwkBkCwF,CAAYxC,EAAM/C,UAEpBgE,UAAU,kBAEZb,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACGN,EAAMyC,WAAW,KAAGzC,EAAM0C,YAAY,aAZhBvE,MAkBhCzF,IAAa0H,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAI,GAAGlC,GAAE,wBAAwB,OAGpD1F,IACEE,EAAW+D,OAAS,EACnB/D,EAAW4I,KAAI,CAACxB,EAAO2C,IACrB3C,EAAMqC,WAAW1F,OAAS,EACxBqD,EAAMqC,WAAWb,KAAI,CAAClE,EAAOsF,KAC3BrC,EAAAA,EAAAA,KAAA,OACEU,UAAU,WAAUX,UAGpBC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,2BAA0BX,UACvCC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,kBAAiBX,SAC7BhD,EAAMiF,MACL,oDAEAnC,EAAAA,EAAAA,MAAA,SACE2B,UAAQ,EACRV,QACEA,IACEnD,GACE8B,EAAMqC,WACNO,GAGN3B,UAAU,eAAcX,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ0B,IAAK3E,EAAOS,KAAK,cACxB,GAAGK,GAAE,2BAGRmC,EAAAA,EAAAA,KAAA,OACE0B,IAAK3E,EACL0E,IAAI,QACJX,QACEA,IACEnD,GACE8B,EAAMqC,WACNO,GAGN3B,UAAU,sBAhCb,GAAG0B,KAAcC,QAwC1BxC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAI,GAAGlC,GAAE,wBAAwB,UAIrCgC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAI,GAAGlC,GAAE,wBAAwB,yBAWlDtF,IACCsH,EAAAA,EAAAA,MAAA,OAAKhG,GAAG,UAAU6G,UAAU,UAASX,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAMU,UAAU,eAAeI,QAASA,IAAMtI,GAAa,GAAOuH,SAAC,UAGnEF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,gBAAeX,SAAA,CAC3BpH,EAAYyD,OAAS,EACpBzD,EAAYsI,KAAI,CAAClF,EAAM6B,KACrBiC,EAAAA,EAAAA,MAAA,OACEa,UAAU,WACVtF,MAAO,CACLgG,QAAS3I,IAAsBmF,EAAQ,QAAU,QACjDmC,SAAA,EAGFF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,aAAYX,SAAA,CACxBnC,EAAQ,EAAE,MAAIjF,EAAYyD,UAG5BL,EAAKiG,MAAM,wCACVhC,EAAAA,EAAAA,KAAA,OAAK0B,IAAK3F,EAAM0F,IAAI,QAClB1F,EAAKiG,MAAM,2CACbnC,EAAAA,EAAAA,MAAA,SAAO2B,UAAQ,EAAAzB,SAAA,EACbC,EAAAA,EAAAA,KAAA,UAAQ0B,IAAK3F,EAAMyB,KAAK,cACvBK,GAAE,wBAEH,OAbCD,MAiBToC,EAAAA,EAAAA,KAAA,KAAAD,SAAIlC,GAAE,eAIRmC,EAAAA,EAAAA,KAAA,KACEU,UAAU,OACVI,QAASA,IACPpI,GAAsB4J,GACX,IAATA,EAAa3J,EAAYyD,OAAS,EAAIkG,EAAO,IAEhDvC,SACF,YAGDC,EAAAA,EAAAA,KAAA,KACEU,UAAU,OACVI,QAASA,IACPpI,GAAsB4J,GACpBA,IAAS3J,EAAYyD,OAAS,EAAI,EAAIkG,EAAO,IAEhDvC,SACF,kBAMPF,EAAAA,EAAAA,MAAC0C,EAAAA,EAAK,CACJC,KAAMnJ,GACNqH,UAAU,aACV+B,OAAQlE,GAAiBwB,SAAA,EAEzBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAA5C,UACvBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAMK,MAAK,CAAClC,UAAU,YAAWX,SAAElC,GAAE,eAExCmC,EAAAA,EAAAA,KAACuC,EAAAA,EAAMM,KAAI,CAAA9C,UACTF,EAAAA,EAAAA,MAAA,QAAMiD,SAhmBarH,UAEzB,GADAoG,EAAEkB,kBACGpJ,GAEH,YADAqJ,MAAM,mCAGRtL,GAAc,GACdF,GAAW,GACX,MAAMiD,EAAiBC,aAAaC,QAAQ,aACtCC,EAAYH,EAAiBI,KAAKC,MAAML,GAAkB,KAC1DiB,EAAW,IAAIuH,SAErBtJ,GAAOqD,SAASqC,IACd3D,EAASwH,OAAO,SAAU7D,EAAK,IAEjCtE,QAAQC,IAAIrB,IACZ+B,EAASwH,OAAO,KAAMrL,GACtB6D,EAASwH,OAAO,UAAWtI,EAAUf,IACrC6B,EAASwH,OAAO,WAAY,IAC5B,IAOE,IAAIrH,SANcC,EAAAA,EAAMC,KAAKT,GAAS,sBAAuBI,EAAU,CACrEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,0BAGJC,KAChBtE,EAAciE,EAAMY,SACpB0G,YAAW,KACTzL,GAAc,GACdF,GAAW,GACX8B,IAAmB,GACnBM,GAAU,MACV2B,GAAqB1B,IACrBjC,EAAc,GAAG,GAChB,KACL,CAAE,MAAO0E,GAEHA,EAAIC,WACGD,EAAIE,QACbzB,QAAQtB,MAAM,gBAAiB6C,EAAIE,SAEnCzB,QAAQtB,MAAM,iBAAkB6C,EAAIG,SAExC,GAojByCsD,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,OAAMX,UACnBF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,wBAAuBX,SAAA,EACpCC,EAAAA,EAAAA,KAAA,KAAGU,UAAU,iBAAgBX,SAAElC,GAAE,sBACjCmC,EAAAA,EAAAA,KAAA,SACExC,KAAK,OACLX,KAAK,OACLuG,UAAQ,EACRC,OAAO,yCACPC,UAAQ,EACRC,SA5jBU1B,IACxB,MAAM2B,EAAgB3B,EAAE4B,OAAOC,MAG/B,IAAIC,EAAa,GACbC,EAAY,GAGZJ,EAAcpH,OALG,GAMnBwH,EAAY,6CAEZzG,MAAM0G,KAAKL,GAAexG,SAASqC,IACjC,MAAMyE,EAAWzE,EAAK7B,KAGjBsG,EAASC,WAAW,WAAcD,EAASC,WAAW,UAEhD1E,EAAK2E,KAfA,SAgBdJ,EAAY,SAASvE,EAAKxC,gCAE1B8G,EAAWjG,KAAK2B,GAJhBuE,EAAY,SAASvE,EAAKxC,iCAK5B,IAIA+G,EACFlK,GAASkK,IAETlK,GAAS,IACTE,GAAU+J,GACZ,EA+hBcjD,UAAU,WACVuD,IAAKtE,KAENlG,KAASuG,EAAAA,EAAAA,KAAA,KAAG5E,MAAO,CAAE8I,MAAO,OAAQnE,SAAEtG,MACvCuG,EAAAA,EAAAA,KAAA,OAAKU,UAAU,SAAStF,MAAO,CAAE+I,OAAQ,QAASpE,UAChDF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,kCAAiCX,SAAA,CAClC,OAAXpG,KACCqG,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGpG,GAAOsH,KAAI,CAAC5B,EAAMzB,KACjBiC,EAAAA,EAAAA,MAAA,OAAKa,UAAU,cAAaX,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,UACExC,KAAK,SACLkD,UAAU,cACVI,QAASA,IAtZjBlD,KAClBhE,IAAW0I,IACT,MAAM8B,EAAgB9B,EAAKP,QAAO,CAACsC,EAAGC,IAAMA,IAAM1G,IAKlD,OAH6B,IAAzBwG,EAAchI,QAAgBuD,GAAa4E,UAC7C5E,GAAa4E,QAAQC,MAAQ,IAExBJ,CAAa,GACpB,EA8YuCK,CAAW7G,GAAOmC,SAClC,OAGDC,EAAAA,EAAAA,KAAA,OAAKU,UAAU,cAAaX,SACzBV,EAAK7B,KAAKuG,WAAW,WACpB/D,EAAAA,EAAAA,KAAA,OACE0B,IAAKgD,IAAIC,gBAAgBtF,GACzBoC,IAAKpC,EAAKxC,QAGZmD,EAAAA,EAAAA,KAAA,SAAO4E,MAAM,MAAMT,OAAO,MAAM3C,UAAQ,EAAAzB,UACtCC,EAAAA,EAAAA,KAAA,UACE0B,IAAKgD,IAAIC,gBAAgBtF,GACzB7B,KAAM6B,EAAK7B,aAlBaI,QA2BxCiC,EAAAA,EAAAA,MAAA,OAAKa,UAAU,kCAAiCX,SAAA,EAC9CC,EAAAA,EAAAA,KAAC6E,EAAAA,IAAa,CAACzJ,MAAO,CAAE0J,SAAU,WAClCjF,EAAAA,EAAAA,MAAA,MACEa,UAAU,gBACVtF,MAAO,CAAE0J,SAAU,QAAS/E,SAAA,CAE3BlC,GAAE,gBAAgB,IAAEA,GAAE,2BAOnCmC,EAAAA,EAAAA,KAAA,QAAMU,UAAU,eAAcX,SAAEpI,IAC/BJ,IACCyI,EAAAA,EAAAA,KAAA,OACEU,UAAU,wCACVqE,KAAK,SAAQhF,UAEbF,EAAAA,EAAAA,MAAA,QAAMa,UAAU,kBAAiBX,SAAA,CAAElC,GAAE,WAAW,YAGpDgC,EAAAA,EAAAA,MAAC0C,EAAAA,EAAMyC,OAAM,CAAAjF,SAAA,EACXC,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,CAACC,QAAQ,YAAYpE,QAASvC,GAAiBwB,SACnDlC,GAAE,YAELmC,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,CACLzH,KAAK,SACLpC,MAAO,CACL+J,WAAY,UACZC,QAAU3N,EAAmB,EAAN,GACvB4N,cAAgB5N,EAAsB,OAAT,QAE/BiJ,UAAU,GAAEX,SAEXlC,GAAE,wBAMbgC,EAAAA,EAAAA,MAAC0C,EAAAA,EAAK,CACJC,KAAMnL,EACNqJ,UAAU,aACV+B,OAAQlE,GAAiBwB,SAAA,EAEzBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAA5C,UACvBF,EAAAA,EAAAA,MAAC0C,EAAAA,EAAMK,MAAK,CAAClC,UAAU,YAAWX,SAAA,CAAC,IAAElC,GAAE,gBAEzCmC,EAAAA,EAAAA,KAACuC,EAAAA,EAAMM,KAAI,CAAA9C,UACTF,EAAAA,EAAAA,MAAA,QACEiD,SApnBerH,UACvB,MAAMhB,EAAiBC,aAAaC,QAAQ,aACtCC,EAAYH,EAAiBI,KAAKC,MAAML,GAAkB,KAChE,IAAIiB,EAAW,CACb2D,KAAMtI,EACN8C,GAAIhD,EACJyO,SAAUzN,EACV8D,QAASf,EAAUf,IAGrB,IACE,MAAMyE,QAAYxC,EAAAA,EAAMC,KAAKT,GAAS,aAAcI,EAAU,CAC5DM,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAGpBlB,QAAQC,IAAIsD,EAAIpC,MAChBpF,EAAc,IACdQ,GAAiB,GACjB6L,YAAW,KACT1M,GAAkB,EAAK,GACtB,IAEHG,EAAqB,sBACrB2E,GAAqB1B,IACrBsJ,YAAW,KACT1M,GAAkB,EAAM,GACvB,IACL,CAAE,MAAO6F,GAAM,GAwlBPiJ,OAAO,OACPC,OAAO,qBAAoBzF,SAAA,EAE3BF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,UAASX,SAAA,CACrB,KAEDF,EAAAA,EAAAA,MAAA,OAAKa,UAAU,YAAWX,SAAA,EACxBF,EAAAA,EAAAA,MAAA,SAAOa,UAAU,uBAAsBX,SAAA,CACpClC,GAAE,iBAAkB,QAEvBmC,EAAAA,EAAAA,KAAA,SACExC,KAAK,OACLiI,UAAQ,EACR5I,KAAK,aACL2H,MAAOvN,EACPyJ,UAAU,eACV0C,UAAQ,QAGZvD,EAAAA,EAAAA,MAAA,OAAKa,UAAU,YAAWX,SAAA,EACxBF,EAAAA,EAAAA,MAAA,SAAOa,UAAU,uBAAsBX,SAAA,CAAElC,GAAE,WAAW,SACtDgC,EAAAA,EAAAA,MAAA,UACEuD,UAAQ,EACR1C,UAAU,eACV6C,SA9mBQmC,IACtB5O,EAAc4O,EAAMjC,OAAOe,MAAM,EA8mBnB3H,KAAK,UAASkD,SAAA,EAEdC,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,GAAEzE,SAAC,eAChB5I,EAAgB8J,KAAI,CAACxB,EAAO7B,KAC3BoC,EAAAA,EAAAA,KAAA,UAAoBwE,MAAO/E,EAAM5F,GAAGkG,SACjCN,EAAM5C,MADIe,eAQrBoC,EAAAA,EAAAA,KAAA,QAAMU,UAAU,eAAcX,SAAEpI,IAC/BJ,IACCyI,EAAAA,EAAAA,KAAA,OACEU,UAAU,wCACVqE,KAAK,SAAQhF,UAEbF,EAAAA,EAAAA,MAAA,QAAMa,UAAU,kBAAiBX,SAAA,CAAElC,GAAE,WAAW,YAGpDgC,EAAAA,EAAAA,MAAC0C,EAAAA,EAAMyC,OAAM,CAAAjF,SAAA,EACXC,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,CAACC,QAAQ,YAAYpE,QAASvC,GAAiBwB,SACnDlC,GAAE,YAELmC,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,CACLzH,KAAK,SACLpC,MAAO,CACL+J,WAAY,WAEdzE,UAAU,GAAEX,SAEXlC,GAAE,sBAObmC,EAAAA,EAAAA,KAACgF,EAAAA,EAAM,KACPhF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAoB,CACnBvF,QAASrB,GACTsB,SA5oBeuF,KACnB5G,IAAiB,GACjB9D,SAASC,KAAKC,MAAMC,UAAY,MAAM,EA2oBlCsD,UAAWA,GACXE,cAAeA,GACfI,kBAAmBA,GACnB9E,YAAaA,GACb0L,YAxlBcpK,UAClB,MAAMhB,EAAiBC,aAAaC,QAAQ,aAC1BF,GAAiBI,KAAKC,MAAML,GAC9C,IAAIiB,EAAW,CACb2D,KAAMhF,GACNR,GAAIM,GACJwB,QAAS1B,IAEXc,QAAQC,IAAIU,GACZ,IACE,MAMM4D,SANYxD,EAAAA,EAAMC,KAAKT,GAAS,mBAAoBI,EAAU,CAClEM,QAAS,CACPC,OAAQ,mBACR,eAAgB,uBAGEC,MACI,IAAtBoD,EAAUC,UACZX,GAAaU,EAAU3C,SACvBmC,GAAiBzE,IAEjBmF,GAAsBnF,GAAUF,IAChCgF,KAEJ,CAAE,MAAO7C,GAAM,GAikBXwJ,SA/jBWA,KACf,GAAIvL,GAAexB,GAAYqD,OAAS,EAAG,CACzC,MAAM2J,EAAYxL,GAAe,EAC3ByL,EAAYjN,GAAYgN,GAC9BvL,GAAgBuL,GAChB3G,GAAqB4G,EAAUnM,GAAImM,EAAUzI,IAAKwI,EACpD,GA0jBIE,aAvjBeA,KACnB,GAAI1L,GAAe,EAAG,CACpB,MAAM2L,EAAY3L,GAAe,EAC3B4L,EAAYpN,GAAYmN,GAC9B1L,GAAgB0L,GAChB9G,GAAqB+G,EAAUtM,GAAIsM,EAAU5I,IAAK2I,EACpD,GAkjBInN,YAAaA,GACbwB,aAAcA,GACdC,gBAAiBA,GACjB4E,qBAAsBA,GACtBgH,YApjBcA,KAClBC,OAAOC,SAASC,QAAQ,MAujB5B,iDC/pCeC,EAAA,CACbC,QAAS,CACPC,MAAO,6BACP9B,MAAO,GACPT,OAAQ,GACRwC,QAAS,YACTC,KAAM,OACNC,OAAQ,eACRC,YAAa,EACbC,cAAe,QACfC,eAAgB,SAElBC,OAAQ,CACNP,MAAO,6BACP9B,MAAO,GACPT,OAAQ,GACRwC,QAAS,YACTC,KAAM,eACNC,OAAQ,SCdZ,MAAMK,EAAuBA,CAC3B1J,EACA2J,EACAC,EACAC,KAEA,MAAMC,GAAYC,EAAAA,EAAAA,aAChB,CAAAC,EAEEvD,KAEA,IAHA,MAAEC,EAAQ,oBAAgBF,EAAO,GAAI6C,OAAAA,EAAS,EAAGxF,MAAAA,EAAA,UAAOX,EAAWX,SAAAA,KAAa0H,GAAAD,EAAA,OAGhFE,EAAAA,EAAAA,eACE,MACA,CACEzD,SACGuC,EAAkBhJ,GACrBoH,MAAOZ,EACPG,OAAQH,EACRtD,UAAW,CAAC,cAAe,eAAeyG,IAAYzG,GAAWiH,KAAK,QACzD,WAATnK,EACA,CACEoJ,KAAM1C,GAER,CACE4C,YAAaD,EACbA,OAAQ3C,MAEXuD,GAEL,CACEpG,IAASqG,EAAAA,EAAAA,eAAc,QAAS,CAAEE,IAAK,aAAevG,MACnDgG,EAASpG,KAAI4G,IAAA,IAAEC,EAAKC,GAAWF,EAAA,OAAAH,EAAAA,EAAAA,eAAcI,EAAKC,EAAM,OACvD5K,MAAMC,QAAQ2C,GAAYA,EAAW,CAACA,IAC5C,IAMC,OAFGuH,EAAAU,YAAc,GAAGZ,IAEpBE,CAAA,uCC1CMhG,GAAA4F,UAAAA,GAAqB,SAAU,cAAe,iBAAkB,CAAC,CAAC,OAAO,CAAC,EAAI,iRAAiR,IAAM","sources":["pages/PrivateMedia.jsx","../node_modules/@tabler/icons-react/src/defaultAttributes.ts","../node_modules/@tabler/icons-react/src/createReactComponent.ts","../node_modules/@tabler/icons-react/src/icons/IconStarFilled.ts"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { BsCloudUpload } from \"react-icons/bs\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport Headertwo from \"../components/Headertwo\";\r\nimport { Footer } from \"../components/Footer\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport SuccessPop from \"../components/SuccessPop\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../i18n\";\r\nimport { AlertDelete } from \"../components/AlertDelete\";\r\nimport { HiDotsVertical } from \"react-icons/hi\";\r\nimport { UserPhotoLikeComment } from \"../components/UserPhotoLikeComment\";\r\nimport { IconStarFilled } from \"@tabler/icons-react\";\r\nimport MediaRenderer from \"../components/MediaRenderer\";\r\nexport default function PrivateMedia() {\r\n  const navigate = useNavigate();\r\n  const [showPopSuccess, setShowPopSuccess] = useState(false);\r\n  const [successPopMessage, setPopsuccessMessage] = useState(\"\");\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [movepostdata, setmovepostdata] = useState(\"\");\r\n  const [mainAlbumname, setmainAlbumname] = useState(\"\");\r\n  const [albumnameMoveto, setalbumnameMoveto] = useState([]);\r\n  const [opemModalmove, setopemModalmove] = useState(false);\r\n  const [spinner, setspinner] = useState(false);\r\n  const [spinnerdis, setspinnerdis] = useState(true);\r\n  const [successmsg, setsuccessmsg] = useState(\"\");\r\n  const [mainId, setmainId] = useState(\"\");\r\n  const [deleteMessage, setdeleteMessage] = useState(\"\");\r\n  const [isPopupOpen_delete, setisPopupOpen_delete] = useState(false);\r\n  const [viewalbum, setviewalbum] = useState(false);\r\n  const [isallmedia, setallmedia] = useState([]);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(1);\r\n  const [isGrouppost, setIsGrouppost] = useState([]);\r\n  const [albumimages, setAlbumimages] = useState([]);\r\n  const [mediaImages, setmediaImages] = useState([]);\r\n  const [mediaVideos, setmediaVideos] = useState([]);\r\n  const [LoginData, setLoginData] = useState(null);\r\n  const [opemModalupload, setopemModalupload] = useState(false);\r\n  const [albumId, setalbumId] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [images, setImages] = useState(null);\r\n  const { id } = useParams();\r\n  const [Albumname, setAlbumname] = useState(\"\");\r\n  //const [modalOpen, setModalOpen] = useState(false);\r\n  // Component Like comment\r\n  const [userId, setuserId] = useState(\"\");\r\n  const [UserAlbumId, setUserAlbumId] = useState(\"\");\r\n  const [openFile, setopenFile] = useState(\"\");\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  // Component Like comment\r\n  const closeModal = () => setModalOpen(false);\r\n  const storedUsername = localStorage.getItem(\"userLogin\");\r\n  const userLogin = storedUsername ? JSON.parse(storedUsername) : null;\r\n  console.log(userLogin.id, id);\r\n  const showSlide = (n) => {\r\n    if (n > images.length) setCurrentSlideIndex(1);\r\n    else if (n < 1) setCurrentSlideIndex(images.length);\r\n    else setCurrentSlideIndex(n);\r\n  };\r\n  useEffect(() => {\r\n    if (modalOpen) {\r\n      // Disable scrolling when modal is open\r\n      document.body.style.overflowY = \"hidden\";\r\n    } else {\r\n      // Enable scrolling when modal is closed\r\n      document.body.style.overflowY = \"auto\";\r\n    }\r\n\r\n    // Cleanup to restore the overflow style when the component unmounts\r\n    return () => {\r\n      document.body.style.overflowY = \"auto\";\r\n    };\r\n  }, [modalOpen]);\r\n  var apiUrl = \"https://backend.amourette.no/api/members/\";\r\n  useEffect(() => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null; // Safely parse login data\r\n    setLoginData(userLogin);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getprivatemediaalbum(id);\r\n    }\r\n  }, [id]);\r\n  useEffect(() => {\r\n    if (id) {\r\n      checkaccessTopage(id);\r\n    }\r\n  }, [id]);\r\n  const checkaccessTopage = async (id) => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null;\r\n    let formData = {\r\n      user_id: userLogin.id,\r\n      albumid: id,\r\n    };\r\n    console.log(formData);\r\n    try {\r\n      const res = await axios.post(apiUrl + \"checkaccessuserAlbum\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Correct content type for file uploads\r\n        },\r\n      });\r\n\r\n      var respo = res.data;\r\n\r\n      if (respo.row.length === 0) {\r\n        try {\r\n          const res = await axios.post(apiUrl + \"checkaccessTopage\", formData, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\", // Correct content type for file uploads\r\n            },\r\n          });\r\n\r\n          var respo = res.data;\r\n          console.log(respo);\r\n          if (respo.status !== \"1\") {\r\n            navigate(\"/dashboard\");\r\n          }\r\n        } catch (err) {\r\n          // Enhanced error handling\r\n          if (err.response) {\r\n            console.error(\"Response error:\", err.response);\r\n          } else if (err.request) {\r\n            console.error(\"Request error:\", err.request);\r\n          } else {\r\n            console.error(\"General error:\", err.message);\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      // Enhanced error handling\r\n      if (err.response) {\r\n        console.error(\"Response error:\", err.response);\r\n      } else if (err.request) {\r\n        console.error(\"Request error:\", err.request);\r\n      } else {\r\n        console.error(\"General error:\", err.message);\r\n      }\r\n    }\r\n  };\r\n  const getprivatemediaalbum = async (id) => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null; // Safely parse login data\r\n    let formData = {\r\n      user_id: userLogin.id,\r\n      album_id: id,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(apiUrl + \"getprivatemediaalbum\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      var respo = res.data;\r\n      console.log(respo.results);\r\n      if (respo.results.length > 0) {\r\n        setmainId(respo.results[0].m_id);\r\n        setAlbumname(respo.results[0].name);\r\n        setuserId(respo.results[0].user_id);\r\n        setmainAlbumname(respo.results[0].name);\r\n        let images = [];\r\n        let videos = [];\r\n\r\n        let media = [];\r\n\r\n        respo.results.forEach((item) => {\r\n          try {\r\n            const mediaArray = JSON.parse(item.images); // safely parse item.images JSON string\r\n\r\n            if (Array.isArray(mediaArray)) {\r\n              mediaArray.forEach((mediaUrl) => {\r\n                // Create a media object for each file\r\n                const mediaObj = {\r\n                  url: mediaUrl,\r\n                  id: item.m_id, // main item ID\r\n                  type: null, // we'll set type below\r\n                  cover_image: item.cover_image,\r\n                };\r\n\r\n                // Only add if type is determined (ignore unknown file types)\r\n                if (mediaObj) {\r\n                  media.push(mediaObj);\r\n                }\r\n              });\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error parsing images JSON:\", error);\r\n          }\r\n        });\r\n        console.log(respo.results);\r\n        setmediaImages(media);\r\n        setmediaVideos(videos);\r\n        setCurrentIndex(0);\r\n      } else {\r\n        // navigate(\"/friendsearch\");\r\n      }\r\n    } catch (err) {\r\n      // Enhanced error handling\r\n      if (err.response) {\r\n      } else if (err.request) {\r\n        //console.error(\"Request data:\", err.request);\r\n      } else {\r\n        // console.error(\"Error message:\", err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getallmedia = async (album_id) => {\r\n    let formData = {\r\n      album_id: album_id,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(apiUrl + \"getallmediaa\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n\r\n      if (res && res.data && res.data.results) {\r\n        const redata = res.data.results;\r\n\r\n        // Parsing the images array and updating state\r\n        const updatedMedia = redata.map((item) => {\r\n          let mediaArray = [];\r\n\r\n          // Check if the 'images' field exists and is a valid string\r\n          if (\r\n            item.images &&\r\n            item.images !== \"undefined\" &&\r\n            item.images !== \"\"\r\n          ) {\r\n            try {\r\n              mediaArray = JSON.parse(item.images); // Parse the string into an array\r\n            } catch (e) {\r\n              console.error(\"Error parsing images for item:\", item.id, e);\r\n              mediaArray = []; // In case of an error, use an empty array\r\n            }\r\n          }\r\n\r\n          // Collect media items, separating images and videos\r\n          const mediaItems = mediaArray.filter(\r\n            (media) =>\r\n              media.match(/\\.(jpeg|jpg|png|gif|webp)$/i) || // Check for images\r\n              media.match(/\\.(mp4|mov|avi|mkv|webm|ogg|flv|3gp|mkv|webm)$/i) // Check for videos\r\n          );\r\n\r\n          return {\r\n            mediaItems: mediaItems, // Store the parsed media array\r\n          };\r\n        });\r\n        setviewalbum(true);\r\n        //console.log(updatedMedia);\r\n        // Set the parsed media data in state\r\n        setallmedia(updatedMedia);\r\n      }\r\n    } catch (err) {\r\n      if (err.response) {\r\n        console.error(\"Server Response Error:\", err.response.data);\r\n      } else if (err.request) {\r\n        console.error(\"No Response Received:\", err.request);\r\n      } else {\r\n        console.error(\"Request Error:\", err.message);\r\n      }\r\n    }\r\n  };\r\n  const openModal = (mediaArray, index) => {\r\n    setIsGrouppost(mediaArray); // Set the full list of images or videos\r\n    setCurrentSlideIndex(index); // Set the clicked item's index\r\n    setModalOpen(true);\r\n  };\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const savedLanguage = localStorage.getItem(\"language\") || \"en\"; // Default to 'en' if no language is saved\r\n    //console.log(\"language\");\r\n    //console.log(savedLanguage);\r\n\r\n    // Change the language if it's not already the current language\r\n    if (i18n.language !== savedLanguage) {\r\n      i18n.changeLanguage(savedLanguage);\r\n    }\r\n  }, [i18n, t]);\r\n  const handledeletebtnn = async () => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null; // Safely parse login data\r\n    let formData = {\r\n      user_id: userLogin.id,\r\n      image: albumId,\r\n      id: mainId,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(apiUrl + \"privatealbumdelete\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      var respo = res.data;\r\n      setisPopupOpen_delete(false);\r\n      getprivatemediaalbum(id);\r\n    } catch (err) {}\r\n  };\r\n  const handledeletebtn = async (idd) => {\r\n    setalbumId(idd);\r\n    setisPopupOpen_delete(true);\r\n    setdeleteMessage(\"Are you sure? You want delete this\");\r\n  };\r\n  const handlecoverphoto = async (urlpost) => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null;\r\n    let formData = {\r\n      id: id,\r\n      user_id: userLogin.id,\r\n      coverphoto: urlpost,\r\n    };\r\n    try {\r\n      const res = await axios.post(apiUrl + \"setCoverphoto\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      setShowMenu(false);\r\n      setShowPopSuccess(true);\r\n      setPopsuccessMessage(\"Cover photo has been set successfully.\");\r\n      getprivatemediaalbum(id);\r\n      setTimeout(() => {\r\n        setShowPopSuccess(false);\r\n      }, 800);\r\n    } catch (err) {\r\n      if (err.response) {\r\n        console.error(\"Server Response Error:\", err.response.data);\r\n      } else if (err.request) {\r\n        console.error(\"No Response Received:\", err.request);\r\n      } else {\r\n        console.error(\"Request Error:\", err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlemovetobtn = async (post) => {\r\n    setopemModalmove(true);\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null;\r\n    let formData = {\r\n      id: id,\r\n      user_id: userLogin.id,\r\n    };\r\n    setmovepostdata(post);\r\n    try {\r\n      const res = await axios.post(apiUrl + \"getmediaAlbumName\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      setalbumnameMoveto(res.data.results);\r\n    } catch (err) {\r\n      if (err.response) {\r\n        console.error(\"Server Response Error:\", err.response.data);\r\n      } else if (err.request) {\r\n        console.error(\"No Response Received:\", err.request);\r\n      } else {\r\n        console.error(\"Request Error:\", err.message);\r\n      }\r\n    }\r\n  };\r\n  const closePopup_delete = () => {\r\n    setisPopupOpen_delete(false);\r\n  };\r\n  const refreshpopup = async () => {\r\n    handledeletebtnn();\r\n  };\r\n  const handleupload = () => {\r\n    setopemModalupload(true);\r\n  };\r\n  const handleModalClose = () => {\r\n    setopemModalupload(false);\r\n    setopemModalmove(false);\r\n  };\r\n  const handleSubmitupload = async (e) => {\r\n    e.preventDefault();\r\n    if (!images) {\r\n      alert(\"Please select images to upload.\");\r\n      return;\r\n    }\r\n    setspinnerdis(false);\r\n    setspinner(true);\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null;\r\n    const formData = new FormData();\r\n\r\n    images.forEach((file) => {\r\n      formData.append(\"images\", file); // Use the key 'files' for your backend to handle multiple files\r\n    });\r\n    console.log(images);\r\n    formData.append(\"id\", mainId);\r\n    formData.append(\"user_id\", userLogin.id);\r\n    formData.append(\"fileType\", \"\");\r\n    try {\r\n      const res = await axios.post(apiUrl + \"uploadprivateAlbums\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n      var respo = res.data;\r\n      setsuccessmsg(respo.message);\r\n      setTimeout(() => {\r\n        setspinnerdis(true);\r\n        setspinner(false);\r\n        setopemModalupload(false);\r\n        setImages(null);\r\n        getprivatemediaalbum(id);\r\n        setsuccessmsg(\"\");\r\n      }, 3500);\r\n    } catch (err) {\r\n      // Enhanced error handling\r\n      if (err.response) {\r\n      } else if (err.request) {\r\n        console.error(\"Request data:\", err.request);\r\n      } else {\r\n        console.error(\"Error message:\", err.message);\r\n      }\r\n    }\r\n  };\r\n  const handleFileChange = (e) => {\r\n    const selectedFiles = e.target.files;\r\n    const maxFileSize = 50 * 1024 * 1024; // 10 MB in bytes\r\n    const maxFileCount = 10; // Maximum of 10 files\r\n    let validFiles = [];\r\n    let fileError = \"\";\r\n\r\n    // Check if the number of files exceeds the limit\r\n    if (selectedFiles.length > maxFileCount) {\r\n      fileError = `You can only upload a maximum of ${maxFileCount} files.`;\r\n    } else {\r\n      Array.from(selectedFiles).forEach((file) => {\r\n        const fileType = file.type;\r\n\r\n        // Allow only images and videos\r\n        if (!fileType.startsWith(\"image/\") && !fileType.startsWith(\"video/\")) {\r\n          fileError = `File \"${file.name}\" is not an image or video.`;\r\n        } else if (file.size > maxFileSize) {\r\n          fileError = `File \"${file.name}\" exceeds the 5 MB limit.`;\r\n        } else {\r\n          validFiles.push(file);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (fileError) {\r\n      setError(fileError);\r\n    } else {\r\n      setError(\"\");\r\n      setImages(validFiles);\r\n    }\r\n  };\r\n  const handleSubmitmove = async () => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null; // Safely parse login data\r\n    let formData = {\r\n      file: movepostdata,\r\n      id: selectedId,\r\n      removeid: mainId,\r\n      user_id: userLogin.id,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(apiUrl + \"movetoFile\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      console.log(res.data);\r\n      setSelectedId(\"\");\r\n      setopemModalmove(false);\r\n      setTimeout(() => {\r\n        setShowPopSuccess(true);\r\n      }, 80);\r\n\r\n      setPopsuccessMessage(\"Successfully moved\");\r\n      getprivatemediaalbum(id);\r\n      setTimeout(() => {\r\n        setShowPopSuccess(false);\r\n      }, 800);\r\n    } catch (err) {}\r\n  };\r\n  const handlechooseId = (event) => {\r\n    setSelectedId(event.target.value); // Update state with selected ID\r\n  };\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const toggleMenu = (index) => {\r\n    setShowMenu(showMenu === index ? null : index);\r\n  };\r\n  //Like Comments, Album\r\n\r\n  const [PopupData, setPopupData] = useState(null);\r\n  const [PopupDatafile, setPopupDatafile] = useState(null);\r\n  const [isPopupOpen11, setIsPopupOpen11] = useState(false);\r\n  const [UserPhotoCommetss, setUserPhotoCommetss] = useState([]);\r\n  const closePopup11 = () => {\r\n    setIsPopupOpen11(false);\r\n    document.body.style.overflowY = \"auto\";\r\n  };\r\n  const openPopup11 = () => {\r\n    setIsPopupOpen11(true);\r\n    document.body.style.overflowY = \"hidden\";\r\n  };\r\n  const openModalLikeComment = async (id, file, index) => {\r\n    setUserAlbumId(id);\r\n    setopenFile(file);\r\n    setCurrentIndex(index);\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null; // Safely parse login data\r\n    let formData = {\r\n      file: file,\r\n      id: id,\r\n      user_id: userId,\r\n    };\r\n    try {\r\n      const res = await axios.post(apiUrl + \"getuseralbumFile\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      const datacheck = res.data;\r\n      //console.log(datacheck);\r\n      if (datacheck.matched === true) {\r\n        setPopupData(datacheck.results);\r\n        setPopupDatafile(file);\r\n\r\n        getUseralbumsComments(file, id);\r\n        openPopup11();\r\n      }\r\n    } catch (err) {}\r\n  };\r\n  const getUseralbumsComments = async (file, id) => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null; // Safely parse login data\r\n    let formData = {\r\n      file: file,\r\n      id: id,\r\n      user_id: userId,\r\n    };\r\n    try {\r\n      const res = await axios.post(apiUrl + \"getUseralbumsComments\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      const datacheck = res.data;\r\n      console.log(datacheck.album);\r\n      setUserPhotoCommetss(datacheck.album.comments);\r\n    } catch (err) {}\r\n  };\r\n  const getfavalbum = async () => {\r\n    const storedUsername = localStorage.getItem(\"userLogin\");\r\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null; // Safely parse login data\r\n    let formData = {\r\n      file: openFile,\r\n      id: UserAlbumId,\r\n      user_id: userId,\r\n    };\r\n    console.log(formData);\r\n    try {\r\n      const res = await axios.post(apiUrl + \"getuseralbumFile\", formData, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\r\n        },\r\n      });\r\n      const datacheck = res.data;\r\n      if (datacheck.matched === true) {\r\n        setPopupData(datacheck.results);\r\n        setPopupDatafile(openFile);\r\n\r\n        getUseralbumsComments(openFile, UserAlbumId);\r\n        openPopup11();\r\n      }\r\n    } catch (err) {}\r\n  };\r\n  const goToNext = () => {\r\n    if (currentIndex < mediaImages.length - 1) {\r\n      const nextIndex = currentIndex + 1;\r\n      const nextMedia = mediaImages[nextIndex];\r\n      setCurrentIndex(nextIndex);\r\n      openModalLikeComment(nextMedia.id, nextMedia.url, nextIndex);\r\n    }\r\n  };\r\n\r\n  const goToPrevious = () => {\r\n    if (currentIndex > 0) {\r\n      const prevIndex = currentIndex - 1;\r\n      const prevMedia = mediaImages[prevIndex];\r\n      setCurrentIndex(prevIndex);\r\n      openModalLikeComment(prevMedia.id, prevMedia.url, prevIndex);\r\n    }\r\n  };\r\n  const refreshpost = () => {\r\n    window.location.reload();\r\n  };\r\n  const fileInputRef = useRef(null);\r\n  const removeFile = (index) => {\r\n    setImages((prev) => {\r\n      const updatedImages = prev.filter((_, i) => i !== index);\r\n      // If no files left, reset the input value\r\n      if (updatedImages.length === 0 && fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n      return updatedImages;\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Headertwo />\r\n      {showPopSuccess && <SuccessPop message={successPopMessage} />}\r\n      <AlertDelete\r\n        isOpen1={isPopupOpen_delete}\r\n        onClose1={closePopup_delete}\r\n        message={deleteMessage}\r\n        onReturnSent={refreshpopup}\r\n      ></AlertDelete>\r\n      <section className=\"ggboxes d-block gapy\">\r\n        <div className=\"container-lg\">\r\n          <div className=\"row gy-4 mb-5\">\r\n            <div className=\"col-md-6\">\r\n              <h1 className=\"pagetitle\">{`${t(\"Photos\")}`}</h1>\r\n              <strong>({Albumname})</strong>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div className=\"d-flex justify-content-md-end\"></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <Tabs>\r\n                <TabList>\r\n                  <div className=\"d-flex align-items-center justify-content-between w-100\">\r\n                    <div className=\"d-flex align-items-center gap-2\">\r\n                      <Tab>{`${t(\"Media\")}`}</Tab>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => navigate(`/friend/${userId}`)}\r\n                        className=\"btn backbtn\"\r\n                      >\r\n                        Back\r\n                      </button>\r\n                    </div>\r\n\r\n                    <button\r\n                      className=\"react-tabs__tab react-tabs__tab--selected\"\r\n                      type=\"button\"\r\n                      onClick={handleupload}\r\n                    >\r\n                      {t(\"Upload\")}\r\n                    </button>\r\n                  </div>\r\n                </TabList>\r\n\r\n                <TabPanel>\r\n                  <div className=\"row gy-4\">\r\n                    {mediaImages.length > 0 ? (\r\n                      mediaImages.map((post, index) => (\r\n                        <div className=\"col-md-3\" key={index}>\r\n                          <div className=\"d-flex flex-column gap-2\">\r\n                            <div className=\"ggimagebox ofit position-relative\">\r\n                              {/* If it is an image */}\r\n                              <MediaRenderer\r\n                                className=\"hover-shadow\"\r\n                                url={post.url}\r\n                                onClick={() =>\r\n                                  openModalLikeComment(post.id, post.url, index)\r\n                                }\r\n                              />\r\n\r\n                              {/* Show edit options if user is owner */}\r\n                              {post.url === post.cover_image && (\r\n                                <>\r\n                                  {userLogin.id === userId && (\r\n                                    <div className=\"d-flex flex-column gap-3 image_center_ w-100\">\r\n                                      <div\r\n                                        style={{\r\n                                          position: \"relative\",\r\n                                          display: \"inline-block\",\r\n                                        }}\r\n                                        className=\"d-flex justify-content-between align-items-center gap-3 w-100\"\r\n                                      >\r\n                                        {post.url === post.cover_image && (\r\n                                          <button\r\n                                            className=\"py-1\"\r\n                                            type=\"button\"\r\n                                            title={t(\"Cover_photo\")}\r\n                                          >\r\n                                            <IconStarFilled />\r\n                                          </button>\r\n                                        )}\r\n                                        <button\r\n                                          className=\"remove_mess\"\r\n                                          onClick={() => toggleMenu(index)}\r\n                                        >\r\n                                          <HiDotsVertical />\r\n                                        </button>\r\n\r\n                                        {/* Popup menu */}\r\n                                        {showMenu === index && (\r\n                                          <ul className=\"popup-menu w-fit\">\r\n                                            <li\r\n                                              onClick={() =>\r\n                                                handledeletebtn(post.url)\r\n                                              }\r\n                                            >\r\n                                              {t(\"delete\")}\r\n                                            </li>\r\n                                            <li\r\n                                              onClick={() =>\r\n                                                handlemovetobtn(post.url)\r\n                                              }\r\n                                            >\r\n                                              {t(\"MOve_to\")}\r\n                                            </li>\r\n                                          </ul>\r\n                                        )}\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                </>\r\n                              )}\r\n                              {post.url != post.cover_image && (\r\n                                <>\r\n                                  {userLogin.id === userId && (\r\n                                    <div className=\"d-flex flex-column gap-3 image_center_ w-100\">\r\n                                      <div\r\n                                        style={{\r\n                                          position: \"relative\",\r\n                                          display: \"inline-block\",\r\n                                        }}\r\n                                        className=\"d-flex justify-content-end align-items-end gap-3 w-100\"\r\n                                      >\r\n                                        <button\r\n                                          className=\"remove_mess\"\r\n                                          onClick={() => toggleMenu(index)}\r\n                                        >\r\n                                          <HiDotsVertical />\r\n                                        </button>\r\n\r\n                                        {/* Popup menu */}\r\n                                        {showMenu === index && (\r\n                                          <ul className=\"popup-menu w-fit\">\r\n                                            <li\r\n                                              onClick={() =>\r\n                                                handledeletebtn(post.url)\r\n                                              }\r\n                                            >\r\n                                              {t(\"delete\")}\r\n                                            </li>\r\n                                            <li\r\n                                              onClick={() =>\r\n                                                handlemovetobtn(post.url)\r\n                                              }\r\n                                            >\r\n                                              {t(\"MOve_to\")}\r\n                                            </li>\r\n                                          </ul>\r\n                                        )}\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    ) : (\r\n                      // If no media available\r\n                      <p>{`${t(\"No_avalibale_media\")}`}.</p>\r\n                    )}\r\n                  </div>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <div className=\"row gy-4\">\r\n                    {mediaVideos.length > 0 ? (\r\n                      mediaVideos.map((post, index) => (\r\n                        <div className=\"col-md-3\" key={index}>\r\n                          <div className=\"d-flex flex-column gap-2\">\r\n                            <div className=\"ggimagebox ofit\">\r\n                              <video\r\n                                onClick={() => openModal(mediaVideos, index)} // Pass media array & index\r\n                                controls\r\n                                alt=\"video\"\r\n                              >\r\n                                <source src={post} type=\"video/mp4\" />\r\n                                {`${t(\"Your_browser_does\")}`}\r\n                              </video>\r\n                              <div className=\"d-flex flex-column gap-3 image_center_\">\r\n                                <div\r\n                                  style={{\r\n                                    position: \"relative\",\r\n                                    display: \"inline-block\",\r\n                                  }}\r\n                                >\r\n                                  <button\r\n                                    className=\"remove_mess\"\r\n                                    onClick={() => toggleMenu(index)}\r\n                                  >\r\n                                    <HiDotsVertical />\r\n                                  </button>\r\n\r\n                                  {showMenu === index && (\r\n                                    <ul className=\"popup-menu w-fit\">\r\n                                      <li onClick={() => handledeletebtn(post)}>\r\n                                        {\" \"}\r\n                                        {t(\"delete\")}\r\n                                      </li>\r\n                                      <li onClick={() => handlemovetobtn(post)}>\r\n                                        {t(\"MOve_to\")}\r\n                                      </li>\r\n                                    </ul>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    ) : (\r\n                      <p>{`${t(\"No_avalibale_media\")}`}.</p>\r\n                    )}\r\n                  </div>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                  <div className=\"row gy-4\">\r\n                    {\r\n                      !viewalbum && albumimages.length > 0\r\n                        ? albumimages.map((album, index) => (\r\n                            <div className=\"col-md-3\" key={index}>\r\n                              <div className=\"d-flex flex-column gap-2\">\r\n                                <div className=\"ggimagebox ofit\">\r\n                                  <img\r\n                                    src={album.img} // You can choose to show the first image as a sample\r\n                                    alt=\"Media\"\r\n                                    onClick={() =>\r\n                                      getallmedia(album.album_id, index)\r\n                                    } // Pass media array & index\r\n                                    className=\"hover-shadow\"\r\n                                  />\r\n                                  <span>\r\n                                    {album.album_name} ({album.media_count})\r\n                                  </span>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          ))\r\n                        : !viewalbum && <p>{`${t(\"No_avalibale_media\")}`}.</p> // Show message when viewalbum is true and no media is available\r\n                    }\r\n\r\n                    {viewalbum &&\r\n                      (isallmedia.length > 0 ? (\r\n                        isallmedia.map((album, albumIndex) =>\r\n                          album.mediaItems.length > 0 ? (\r\n                            album.mediaItems.map((media, mediaIndex) => (\r\n                              <div\r\n                                className=\"col-md-3\"\r\n                                key={`${albumIndex}-${mediaIndex}`}\r\n                              >\r\n                                <div className=\"d-flex flex-column gap-2\">\r\n                                  <div className=\"ggimagebox ofit\">\r\n                                    {media.match(\r\n                                      /\\.(mp4|mov|avi|mkv|webm|ogg|flv|3gp|mkv|webm)$/i\r\n                                    ) ? (\r\n                                      <video\r\n                                        controls\r\n                                        onClick={\r\n                                          () =>\r\n                                            openModal(\r\n                                              album.mediaItems,\r\n                                              mediaIndex\r\n                                            ) // Pass the media array & index\r\n                                        }\r\n                                        className=\"hover-shadow\"\r\n                                      >\r\n                                        <source src={media} type=\"video/mp4\" />\r\n                                        {`${t(\"Your_browser_does\")}`}\r\n                                      </video>\r\n                                    ) : (\r\n                                      <img\r\n                                        src={media} // Display the image\r\n                                        alt=\"Media\"\r\n                                        onClick={\r\n                                          () =>\r\n                                            openModal(\r\n                                              album.mediaItems,\r\n                                              mediaIndex\r\n                                            ) // Pass the media array & index\r\n                                        }\r\n                                        className=\"hover-shadow\"\r\n                                      />\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            ))\r\n                          ) : (\r\n                            <p>{`${t(\"No_avalibale_media\")}`}.</p>\r\n                          )\r\n                        )\r\n                      ) : (\r\n                        <p>{`${t(\"No_avalibale_media\")}`}.</p>\r\n                      ))}\r\n                  </div>\r\n                </TabPanel>\r\n              </Tabs>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* pop up code */}\r\n      {modalOpen && (\r\n        <div id=\"myModal\" className=\"modalgg\">\r\n          <span className=\"close cursor\" onClick={() => setModalOpen(false)}>\r\n            &times;\r\n          </span>\r\n          <div className=\"modal-content\">\r\n            {isGrouppost.length > 0 ? (\r\n              isGrouppost.map((post, index) => (\r\n                <div\r\n                  className=\"mySlides\"\r\n                  style={{\r\n                    display: currentSlideIndex === index ? \"block\" : \"none\",\r\n                  }}\r\n                  key={index}\r\n                >\r\n                  <div className=\"numbertext\">\r\n                    {index + 1} / {isGrouppost.length}\r\n                  </div>\r\n\r\n                  {post.match(/\\.(jpeg|jpg|gif|png|webp|bmp|svg)$/i) ? (\r\n                    <img src={post} alt=\"img\" />\r\n                  ) : post.match(/\\.(mp4|mov|avi|mkv|webm|ogg|flv|3gp)$/i) ? (\r\n                    <video controls>\r\n                      <source src={post} type=\"video/mp4\" />\r\n                      {t(\"Your_browser_does\")}\r\n                    </video>\r\n                  ) : null}\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{t(\"Noresult\")}</p>\r\n            )}\r\n\r\n            {/* Navigation Arrows */}\r\n            <a\r\n              className=\"prev\"\r\n              onClick={() =>\r\n                setCurrentSlideIndex((prev) =>\r\n                  prev === 0 ? isGrouppost.length - 1 : prev - 1\r\n                )\r\n              }\r\n            >\r\n              &#10094;\r\n            </a>\r\n            <a\r\n              className=\"next\"\r\n              onClick={() =>\r\n                setCurrentSlideIndex((prev) =>\r\n                  prev === isGrouppost.length - 1 ? 0 : prev + 1\r\n                )\r\n              }\r\n            >\r\n              &#10095;\r\n            </a>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <Modal\r\n        show={opemModalupload}\r\n        className=\"edit_admin\"\r\n        onHide={handleModalClose}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className=\"textcolor\">{t(\"Upload\")}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form onSubmit={handleSubmitupload}>\r\n            <div className=\"mb-3\">\r\n              <div className=\"uploadfile rel bgload\">\r\n                <p className=\"pb-2 text-dark\">{t(\"select_one_more\")}</p>\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"file\"\r\n                  required\r\n                  accept=\"image/*,video/mp4,video/webm,video/ogg\"\r\n                  multiple\r\n                  onChange={handleFileChange}\r\n                  className=\"fileload\"\r\n                  ref={fileInputRef}\r\n                />\r\n                {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n                <div className=\"inload\" style={{ height: \"50px\" }}>\r\n                  <div className=\"d-flex gap-3 align-items-center\">\r\n                    {images !== null && (\r\n                      <>\r\n                        {images.map((file, index) => (\r\n                          <div className=\"upimage rel\" key={index}>\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"preremovBtn\"\r\n                              onClick={() => removeFile(index)}\r\n                            >\r\n                              X\r\n                            </button>\r\n                            <div className=\"inimag ofit\">\r\n                              {file.type.startsWith(\"image/\") ? (\r\n                                <img\r\n                                  src={URL.createObjectURL(file)}\r\n                                  alt={file.name}\r\n                                />\r\n                              ) : (\r\n                                <video width=\"160\" height=\"120\" controls>\r\n                                  <source\r\n                                    src={URL.createObjectURL(file)}\r\n                                    type={file.type}\r\n                                  />\r\n                                </video>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </>\r\n                    )}\r\n                    <div className=\"d-flex align-items-center gap-2\">\r\n                      <BsCloudUpload style={{ fontSize: \"24px\" }} />\r\n                      <h3\r\n                        className=\"m-0 text-dark\"\r\n                        style={{ fontSize: \"14px\" }}\r\n                      >\r\n                        {t(\"upload_image\")}/{t(\"Videos\")}\r\n                      </h3>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <span className=\"text-success\">{successmsg}</span>\r\n            {spinner && (\r\n              <div\r\n                className=\"spinner-border text-success send_load\"\r\n                role=\"status\"\r\n              >\r\n                <span className=\"visually-hidden\">{t(\"loading\")}...</span>\r\n              </div>\r\n            )}\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                {t(\"Close\")}\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                style={{\r\n                  background: \"#6e75a8\",\r\n                  opacity: !spinnerdis ? 0.1 : 1,\r\n                  pointerEvents: !spinnerdis ? \"none\" : \"auto\",\r\n                }}\r\n                className=\"\"\r\n              >\r\n                {t(\"Upload\")}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal\r\n        show={opemModalmove}\r\n        className=\"edit_admin\"\r\n        onHide={handleModalClose}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className=\"textcolor\"> {t(\"Upload\")}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            onSubmit={handleSubmitmove}\r\n            method=\"post\"\r\n            action=\"javascript:void(0)\"\r\n          >\r\n            <div className=\"row g-3\">\r\n              {\" \"}\r\n              {/* Added spacing between rows */}\r\n              <div className=\"col-md-12\">\r\n                <label className=\"stextlabel text-dark\">\r\n                  {t(\"AlbumNameFrom\")}{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  disabled\r\n                  name=\"album_name\"\r\n                  value={mainAlbumname}\r\n                  className=\"form-control\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <label className=\"stextlabel text-dark\">{t(\"MOve_to\")} *</label>\r\n                <select\r\n                  required\r\n                  className=\"form-control\"\r\n                  onChange={handlechooseId}\r\n                  name=\"move_to\"\r\n                >\r\n                  <option value=\"\">--Select--</option>\r\n                  {albumnameMoveto.map((album, index) => (\r\n                    <option key={index} value={album.id}>\r\n                      {album.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <span className=\"text-success\">{successmsg}</span>\r\n            {spinner && (\r\n              <div\r\n                className=\"spinner-border text-success send_load\"\r\n                role=\"status\"\r\n              >\r\n                <span className=\"visually-hidden\">{t(\"loading\")}...</span>\r\n              </div>\r\n            )}\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                {t(\"Close\")}\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                style={{\r\n                  background: \"#6e75a8\",\r\n                }}\r\n                className=\"\"\r\n              >\r\n                {t(\"Move\")}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n      {/* pop up code */}\r\n      <Footer />\r\n      <UserPhotoLikeComment\r\n        isOpen1={isPopupOpen11}\r\n        onClose1={closePopup11}\r\n        PopupData={PopupData}\r\n        PopupDatafile={PopupDatafile}\r\n        UserPhotoCommetss={UserPhotoCommetss}\r\n        UserAlbumId={UserAlbumId}\r\n        getfavalbum={getfavalbum}\r\n        goToNext={goToNext}\r\n        goToPrevious={goToPrevious}\r\n        mediaImages={mediaImages} // Pass mediaImages\r\n        currentIndex={currentIndex} // Pass currentIndex\r\n        setCurrentIndex={setCurrentIndex} // Pass setter if updating in child\r\n        openModalLikeComment={openModalLikeComment} // Pass to update popup\r\n        refreshpost={refreshpost}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","export default {\n  outline: {\n    xmlns: 'http://www.w3.org/2000/svg',\n    width: 24,\n    height: 24,\n    viewBox: '0 0 24 24',\n    fill: 'none',\n    stroke: 'currentColor',\n    strokeWidth: 2,\n    strokeLinecap: 'round',\n    strokeLinejoin: 'round',\n  },\n  filled: {\n    xmlns: 'http://www.w3.org/2000/svg',\n    width: 24,\n    height: 24,\n    viewBox: '0 0 24 24',\n    fill: 'currentColor',\n    stroke: 'none',\n  },\n};\n","import { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes';\nimport type { IconNode, IconProps, Icon } from './types';\n\nconst createReactComponent = (\n  type: 'outline' | 'filled',\n  iconName: string,\n  iconNamePascal: string,\n  iconNode: IconNode,\n) => {\n  const Component = forwardRef<Icon, IconProps>(\n    (\n      { color = 'currentColor', size = 24, stroke = 2, title, className, children, ...rest }: IconProps,\n      ref,\n    ) =>\n      createElement(\n        'svg',\n        {\n          ref,\n          ...defaultAttributes[type],\n          width: size,\n          height: size,\n          className: [`tabler-icon`, `tabler-icon-${iconName}`, className].join(' '),\n          ...(type === 'filled'\n            ? {\n                fill: color,\n              }\n            : {\n                strokeWidth: stroke,\n                stroke: color,\n              }),\n          ...rest,\n        },\n        [\n          title && createElement('title', { key: 'svg-title' }, title),\n          ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n          ...(Array.isArray(children) ? children : [children]),\n        ],\n      ),\n  );\n\n  Component.displayName = `${iconNamePascal}`;\n\n  return Component;\n};\n\nexport default createReactComponent;\n","import createReactComponent from '../createReactComponent';\nexport default createReactComponent('filled', 'star-filled', 'IconStarFilled', [[\"path\",{\"d\":\"M8.243 7.34l-6.38 .925l-.113 .023a1 1 0 0 0 -.44 1.684l4.622 4.499l-1.09 6.355l-.013 .11a1 1 0 0 0 1.464 .944l5.706 -3l5.693 3l.1 .046a1 1 0 0 0 1.352 -1.1l-1.091 -6.355l4.624 -4.5l.078 -.085a1 1 0 0 0 -.633 -1.62l-6.38 -.926l-2.852 -5.78a1 1 0 0 0 -1.794 0l-2.853 5.78z\",\"key\":\"svg-0\"}]]);"],"names":["PrivateMedia","navigate","useNavigate","showPopSuccess","setShowPopSuccess","useState","successPopMessage","setPopsuccessMessage","selectedId","setSelectedId","movepostdata","setmovepostdata","mainAlbumname","setmainAlbumname","albumnameMoveto","setalbumnameMoveto","opemModalmove","setopemModalmove","spinner","setspinner","spinnerdis","setspinnerdis","successmsg","setsuccessmsg","mainId","setmainId","deleteMessage","setdeleteMessage","isPopupOpen_delete","setisPopupOpen_delete","viewalbum","setviewalbum","isallmedia","setallmedia","modalOpen","setModalOpen","currentSlideIndex","setCurrentSlideIndex","isGrouppost","setIsGrouppost","albumimages","setAlbumimages","mediaImages","setmediaImages","mediaVideos","setmediaVideos","LoginData","setLoginData","opemModalupload","setopemModalupload","albumId","setalbumId","error","setError","images","setImages","id","useParams","Albumname","setAlbumname","userId","setuserId","UserAlbumId","setUserAlbumId","openFile","setopenFile","currentIndex","setCurrentIndex","storedUsername","localStorage","getItem","userLogin","JSON","parse","console","log","useEffect","document","body","style","overflowY","apiUrl","getprivatemediaalbum","checkaccessTopage","async","formData","user_id","albumid","respo","axios","post","headers","Accept","data","row","length","status","err","response","request","message","album_id","results","m_id","name","videos","media","forEach","item","mediaArray","Array","isArray","mediaUrl","mediaObj","url","type","cover_image","push","openModal","index","t","useTranslation","savedLanguage","i18n","language","changeLanguage","handledeletebtn","idd","handlemovetobtn","res","handleModalClose","showMenu","setShowMenu","toggleMenu","PopupData","setPopupData","PopupDatafile","setPopupDatafile","isPopupOpen11","setIsPopupOpen11","UserPhotoCommetss","setUserPhotoCommetss","openPopup11","openModalLikeComment","file","datacheck","matched","getUseralbumsComments","album","comments","fileInputRef","useRef","_jsxs","_Fragment","children","_jsx","Headertwo","SuccessPop","AlertDelete","isOpen1","onClose1","closePopup_delete","onReturnSent","image","handledeletebtnn","className","Tabs","TabList","Tab","onClick","handleupload","TabPanel","map","MediaRenderer","position","display","title","IconStarFilled","HiDotsVertical","controls","alt","src","img","updatedMedia","e","mediaItems","filter","match","getallmedia","album_name","media_count","albumIndex","mediaIndex","prev","Modal","show","onHide","Header","closeButton","Title","Body","onSubmit","preventDefault","alert","FormData","append","setTimeout","required","accept","multiple","onChange","selectedFiles","target","files","validFiles","fileError","from","fileType","startsWith","size","ref","color","height","updatedImages","_","i","current","value","removeFile","URL","createObjectURL","width","BsCloudUpload","fontSize","role","Footer","Button","variant","background","opacity","pointerEvents","removeid","method","action","disabled","event","UserPhotoLikeComment","closePopup11","getfavalbum","goToNext","nextIndex","nextMedia","goToPrevious","prevIndex","prevMedia","refreshpost","window","location","reload","defaultAttributes","outline","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","filled","createReactComponent","iconName","iconNamePascal","iconNode","Component","forwardRef","_ref","rest","createElement","join","key","_ref2","tag","attrs","displayName"],"sourceRoot":""}