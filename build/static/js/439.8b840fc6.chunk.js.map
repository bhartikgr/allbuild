{"version":3,"file":"static/js/439.8b840fc6.chunk.js","mappings":"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","sources":["pages/User/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport MainHeader from \"../../components/Users/MainHeader\";\r\nimport Alertpopup from \"../../components/Alertpopup\";\r\nimport Alertpopupsuccess from \"../../components/Alertpopupsuccess\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport {\r\n  Stepblock,\r\n  Titletext,\r\n  SectionWrapper,\r\n  Wrapper,\r\n} from \"../../components/Styles/RegisterStyles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { momentLocalizer } from \"react-big-calendar\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { format, toZonedTime } from \"date-fns-tz\";\r\nimport ModuleSideNav from \"../../components/Users/ModuleSideNav\";\r\nimport axios from \"axios\";\r\nexport default function Dashboard() {\r\n  const [iframe, setiframe] = useState(\"\");\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [formData, setFormData] = useState({ name: \"\", email: \"\" });\r\n  const localizer = momentLocalizer(moment);\r\n  const [selectedSlots, setSelectedSlots] = useState([]);\r\n  const [ClientIP, setClientIP] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [errorMsg, seterrorMsg] = useState(\"\");\r\n  const [successMsg, setsuccessMsg] = useState(\"\");\r\n  const [selectedTime, setSelectedTime] = useState(null);\r\n  const [SelectedTimehours, setSelectedTimehours] = useState(\"\");\r\n  const [disabledButton, setdisabledButton] = useState(true);\r\n  const [currentTime, setCurrentTime] = useState(\"\");\r\n  const [moduledata, setmoduledata] = useState(\"\");\r\n  const [loader, setloader] = useState(\"\");\r\n  const { id } = useParams();\r\n  const apiURL = \"https://blueprintcatalyst.com/api/user/\";\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  useEffect(() => {\r\n    // Get supported time zones dynamically\r\n    if (Intl.supportedValuesOf) {\r\n      const zones = Intl.supportedValuesOf(\"timeZone\");\r\n      setTimeZones(zones);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.title = \"Dashboard Page\";\r\n  }, []);\r\n  const handleSelectSlot = async ({ start, end }) => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0); // midnight today\r\n    const slotDate = new Date(start);\r\n    slotDate.setHours(0, 0, 0, 0); // compare by date only\r\n\r\n    // Check if selected date is in the past\r\n    if (slotDate < today) {\r\n      seterrorMsg(\"You cannot select a past date.\");\r\n      return; // ⛔ block past date selection\r\n    }\r\n\r\n    // Check if the selected date already exists in selectedSlots\r\n    const isDateAlreadySelected = selectedSlots.some(\r\n      (slot) => new Date(slot.start).setHours(0, 0, 0) === slotDate.getTime()\r\n    );\r\n\r\n    if (isDateAlreadySelected) {\r\n      seterrorMsg(\"You cannot select the same date multiple times.\");\r\n      return; // ⛔ block selecting the same date multiple times\r\n    }\r\n\r\n    // Check if user has already selected 3 slots\r\n    if (selectedSlots.length >= 3) {\r\n      seterrorMsg(\"You can only select up to 3 meetings.\");\r\n      return;\r\n    }\r\n\r\n    // Enable button and update selected slots\r\n    setdisabledButton(false);\r\n    const newSlot = { start, end };\r\n    const updatedSlots = [...selectedSlots, newSlot];\r\n    setSelectedSlots(updatedSlots);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getIP = async () => {\r\n      try {\r\n        const res = await fetch(\"https://api.ipify.org?format=json\");\r\n        const data = await res.json();\r\n        setClientIP(data.ip); // Save this to state\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch IP\", error);\r\n      }\r\n    };\r\n\r\n    getIP();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    let formdata = {\r\n      name: e.target.name.value,\r\n      email: e.target.email.value,\r\n      timeset: SelectedTimehours,\r\n      module_id: id,\r\n      ip_address: ClientIP,\r\n      selectedZone: selectedZone,\r\n      selectedSlots: selectedSlots,\r\n    };\r\n    setloader(true);\r\n    try {\r\n      const res = await axios.post(apiURL + \"registerforZoom\", formdata, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      setloader(false);\r\n      var checkdata = res.data;\r\n      if (checkdata.status === \"2\") {\r\n        setsuccessMsg(\"\");\r\n        seterrorMsg(checkdata.message);\r\n        return;\r\n      }\r\n      if (checkdata.status === \"1\") {\r\n        seterrorMsg(\"\");\r\n        setsuccessMsg(checkdata.message);\r\n        setShowPopup(false);\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 3000);\r\n        return;\r\n      }\r\n    } catch (err) {}\r\n    console.log(\"Form submitted\", formdata);\r\n    //setShowPopup(false);\r\n  };\r\n  const [timeZones, setTimeZones] = useState([]);\r\n  const [selectedZone, setSelectedZone] = useState(\r\n    Intl.DateTimeFormat().resolvedOptions().timeZone\r\n  );\r\n  useEffect(() => {\r\n    // Get supported time zones dynamically\r\n    if (Intl.supportedValuesOf) {\r\n      const zones = Intl.supportedValuesOf(\"timeZone\");\r\n      setTimeZones(zones);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update time whenever selectedZone changes\r\n    const updateTime = () => {\r\n      const time = new Intl.DateTimeFormat(\"en-US\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        hour12: true,\r\n        timeZone: selectedZone,\r\n      }).format(new Date());\r\n      setCurrentTime(time);\r\n    };\r\n\r\n    updateTime(); // initial\r\n    const interval = setInterval(updateTime, 60000); // update every minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, [selectedZone]);\r\n  const handleTimeChange = (time) => {\r\n    const zonedTime = toZonedTime(time, selectedZone); // Convert to the selected time\r\n    const timeOnly = format(time, \"hh:mm a\");\r\n    setSelectedTimehours(timeOnly);\r\n    setSelectedTime(zonedTime);\r\n  };\r\n  const [loading, setLoading] = useState(false);\r\n  const now = new Date();\r\n  now.setHours(0, 0, 0, 0); // Set time to midnight for date-only comparison\r\n\r\n  const dayPropGetter = (date) => {\r\n    const day = new Date(date);\r\n    day.setHours(0, 0, 0, 0);\r\n\r\n    if (day < now) {\r\n      return {\r\n        style: {\r\n          backgroundColor: \"#e0e0e0\", // Greyed out\r\n          pointerEvents: \"none\", // Completely disables clicking/selecting\r\n          opacity: 0.6,\r\n          cursor: \"none\",\r\n        },\r\n      };\r\n    }\r\n\r\n    return {};\r\n  };\r\n\r\n  const handlezoom = async () => {\r\n    let formdata = {\r\n      token:\r\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3R0QGdtYWlsLmNvbSIsImlwIjoiMjIzLjE3OC4yMTMuMTQ2IiwibWVldGluZ0lkIjo4ODY2NTI0NzYwOSwiaWF0IjoxNzQ3ODA2OTAxLCJleHAiOjE3NDc4MTA1MDF9.UsmwztO1nznqBAB499GJGV15i0ST_nbWqleQwaX7iz8\",\r\n      ip: ClientIP,\r\n    };\r\n    setloader(true);\r\n    try {\r\n      const res = await axios.post(apiURL + \"joinZoomMeeting\", formdata, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      console.log(res.data);\r\n      if (res.data.message) {\r\n        seterrorMsg(res.data.message);\r\n      } else {\r\n        setiframe(res.data);\r\n      }\r\n    } catch (err) {}\r\n  };\r\n  useEffect(() => {\r\n    const handleMessage = (event) => {\r\n      if (event.data === \"zoom-loaded\") {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"message\", handleMessage);\r\n    return () => window.removeEventListener(\"message\", handleMessage);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        <div className=\"fullpage d-block\">\r\n          <MainHeader />\r\n\r\n          <SectionWrapper className=\"d-block py-5\">\r\n            <div className=\"container-lg\">\r\n              <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-3\">\r\n                  <ModuleSideNav />\r\n                </div>\r\n                <div className=\"col-md-9\">\r\n                  <form action=\"\">\r\n                    <Stepblock id=\"step5\">\r\n                      <div className=\"d-flex flex-column gap-5\">\r\n                        {errorMsg && (\r\n                          <Alertpopup\r\n                            message={errorMsg}\r\n                            onClose={() => seterrorMsg(\"\")}\r\n                          />\r\n                        )}\r\n                        {successMsg && (\r\n                          <Alertpopupsuccess\r\n                            message={successMsg}\r\n                            onClose={() => setsuccessMsg(\"\")}\r\n                          />\r\n                        )}\r\n                        <Titletext>Dashboard</Titletext>\r\n                        <div\r\n                          style={{ position: \"relative\", minHeight: \"100%\" }}\r\n                        >\r\n                          {loading && (\r\n                            <div\r\n                              style={{\r\n                                position: \"absolute\",\r\n                                width: \"100%\",\r\n                                height: \"100%\",\r\n                                background: \"#fff\",\r\n                                zIndex: 10,\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                justifyContent: \"center\",\r\n                              }}\r\n                            >\r\n                              <p>Loading Zoom Meeting...</p>\r\n                            </div>\r\n                          )}\r\n                          <div\r\n                            dangerouslySetInnerHTML={{ __html: iframe }}\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"row gy-3\">\r\n                          <button\r\n                            type=\"button\"\r\n                            class=\"joinbtn\"\r\n                            onClick={handlezoom}\r\n                          >\r\n                            Join Metting\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </Stepblock>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </SectionWrapper>\r\n        </div>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Dashboard","iframe","setiframe","useState","showPopup","setShowPopup","formData","setFormData","name","email","selectedSlots","setSelectedSlots","momentLocalizer","moment","ClientIP","setClientIP","message","setMessage","errorMsg","seterrorMsg","successMsg","setsuccessMsg","selectedTime","setSelectedTime","SelectedTimehours","setSelectedTimehours","disabledButton","setdisabledButton","currentTime","setCurrentTime","moduledata","setmoduledata","loader","setloader","id","useParams","apiURL","useEffect","Intl","supportedValuesOf","zones","setTimeZones","document","title","async","res","fetch","data","json","ip","error","console","getIP","timeZones","selectedZone","setSelectedZone","DateTimeFormat","resolvedOptions","timeZone","updateTime","time","hour","minute","hour12","format","Date","interval","setInterval","clearInterval","loading","setLoading","now","setHours","handleMessage","event","window","addEventListener","removeEventListener","_jsx","_Fragment","children","Wrapper","_jsxs","className","MainHeader","SectionWrapper","ModuleSideNav","action","Stepblock","Alertpopup","onClose","Alertpopupsuccess","Titletext","style","position","minHeight","width","height","background","zIndex","display","alignItems","justifyContent","dangerouslySetInnerHTML","__html","type","class","onClick","formdata","token","axios","post","headers","Accept","log","err"],"sourceRoot":""}