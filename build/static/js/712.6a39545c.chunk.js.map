{"version":3,"file":"static/js/712.6a39545c.chunk.js","mappings":"uTA8Be,SAASA,KACLC,EAAAA,EAAAA,MAAjB,MACOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,CAAEG,KAAM,GAAIC,MAAO,MAErDC,EAAeC,KADJC,EAAAA,EAAAA,IAAgBC,MACQR,EAAAA,EAAAA,UAAS,MAC5CS,EAAUC,IAAeV,EAAAA,EAAAA,UAAS,KAClCW,EAASC,IAAcZ,EAAAA,EAAAA,UAAS,KAChCa,EAAUC,IAAed,EAAAA,EAAAA,UAAS,KAClCe,EAAYC,IAAiBhB,EAAAA,EAAAA,UAAS,KACtCiB,EAAcC,IAAmBlB,EAAAA,EAAAA,UAAS,OAC1CmB,EAAmBC,IAAwBpB,EAAAA,EAAAA,UAAS,KACpDqB,EAAgBC,IAAqBtB,EAAAA,EAAAA,WAAS,IAC9CuB,EAAaC,IAAkBxB,EAAAA,EAAAA,UAAS,KACxCyB,EAAYC,IAAiB1B,EAAAA,EAAAA,UAAS,KACtC2B,EAAQC,IAAa5B,EAAAA,EAAAA,UAAS,KAC/B,GAAE6B,IAAOC,EAAAA,EAAAA,MACRC,EAAkBC,IAAuBhC,EAAAA,EAAAA,UAAS,IACnDiC,EAAS,0CACTC,EAAgBC,IACpBjC,EAAY,IAAKD,EAAU,CAACkC,EAAEC,OAAOjC,MAAOgC,EAAEC,OAAOC,OAAQ,GAE/DC,EAAAA,EAAAA,YAAU,KAER,GAAIC,KAAKC,kBAAmB,CAC1B,MAAMC,EAAQF,KAAKC,kBAAkB,YACrCE,EAAaD,EACf,IACC,KACHH,EAAAA,EAAAA,YAAU,KACcK,WACpB,IAAIC,EAAW,CACbf,GAAIA,GAEN,IACE,MAAMgB,QAAYC,EAAAA,EAAMC,KAAKd,EAAS,eAAgBW,EAAU,CAC9DI,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAGhBJ,EAAIK,KAAKC,QAAQC,OAAS,GAC5B1B,EAAcmB,EAAIK,KAAKC,QAAQ,GAInC,CAAE,MAAOE,GAAM,GAEjBC,EAAe,GACd,CAACzB,KACJS,EAAAA,EAAAA,YAAU,KACRiB,SAASC,MAAQ,aAAa,GAC7B,KAoCHlB,EAAAA,EAAAA,YAAU,KACMK,WACZ,IACE,MAAME,QAAYY,MAAM,qCAClBP,QAAaL,EAAIa,OACvBhD,EAAYwC,EAAKS,GACnB,CAAE,MAAOC,GACPC,QAAQD,MAAM,qBAAsBA,EACtC,GAGFE,EAAO,GACN,IAEH,MAyCOC,EAAWrB,IAAgB1C,EAAAA,EAAAA,UAAS,KACpCgE,EAAcC,IAAmBjE,EAAAA,EAAAA,UACtCuC,KAAK2B,iBAAiBC,kBAAkBC,WAE1C9B,EAAAA,EAAAA,YAAU,KAER,GAAIC,KAAKC,kBAAmB,CAC1B,MAAMC,EAAQF,KAAKC,kBAAkB,YACrCE,EAAaD,EACf,IACC,KAEHH,EAAAA,EAAAA,YAAU,KAER,MAAM+B,EAAaA,KACjB,MAAMC,EAAO,IAAI/B,KAAK2B,eAAe,QAAS,CAC5CK,KAAM,UACNC,OAAQ,UACRC,QAAQ,EACRL,SAAUJ,IACTU,OAAO,IAAIC,MACdnD,EAAe8C,EAAK,EAGtBD,IACA,MAAMO,EAAWC,YAAYR,EAAY,KAEzC,MAAO,IAAMS,cAAcF,EAAS,GACnC,CAACZ,IACJ,MAMMe,EAAM,IAAIJ,KAChBI,EAAIC,SAAS,EAAG,EAAG,EAAG,GAsBtB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAF,SAAA,EACNC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,mBAAkBH,SAAA,EAC/BF,EAAAA,EAAAA,KAACM,EAAAA,EAAU,KAEXN,EAAAA,EAAAA,KAACO,EAAAA,GAAc,CAACF,UAAU,eAAcH,UACtCF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,eAAcH,UAC3BC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,6BAA4BH,SAAA,EACzCF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,WAAUH,UACvBF,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,OAEhBR,EAAAA,EAAAA,KAAA,OAAKK,UAAU,WAAUH,UACvBF,EAAAA,EAAAA,KAAA,QAAMS,OAAO,GAAEP,UACbF,EAAAA,EAAAA,KAACU,EAAAA,GAAS,CAAC9D,GAAG,QAAOsD,UACnBC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BH,SAAA,EACvCF,EAAAA,EAAAA,KAACW,EAAAA,GAAS,CAAAT,SAAC,eACXF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,WAAUH,UACvBF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,gDAWjCL,EAAAA,EAAAA,KAACY,EAAAA,GAAO,CAACC,KAAMhG,EAAUqF,UACvBC,EAAAA,EAAAA,MAACW,EAAAA,GAAQ,CAAAZ,SAAA,EACPF,EAAAA,EAAAA,KAACe,EAAAA,GAAQ,CAACC,QAASA,IAAMlG,GAAa,GAAOoF,SAAC,UAC9CF,EAAAA,EAAAA,KAAA,QAAMiB,SAnIKvD,UACnBR,EAAEgE,iBACF,IAAIvD,EAAW,CACbzC,KAAMgC,EAAEC,OAAOjC,KAAKkC,MACpBjC,MAAO+B,EAAEC,OAAOhC,MAAMiC,MACtB+D,QAASjF,EACTkF,UAAWxE,EACXyE,WAAY7F,EACZuD,aAAcA,EACd3D,cAAeA,EACfkG,YAAaxE,GAGfH,GAAU,GACV,IACE,MAAMiB,QAAYC,EAAAA,EAAMC,KAAKd,EAAS,kBAAmBW,EAAU,CACjEI,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAGpBrB,GAAU,GACV,IAAI4E,EAAY3D,EAAIK,KACpB,GAAyB,MAArBsD,EAAUC,OAGZ,OAFAzF,EAAc,SACdF,EAAY0F,EAAU7F,SAGxB,GAAyB,MAArB6F,EAAUC,OAOZ,OANA3F,EAAY,IACZE,EAAcwF,EAAU7F,SACxBZ,GAAa,QACb2G,YAAW,KACTC,OAAOC,SAASC,QAAQ,GACvB,IAGP,CAAE,MAAOxD,GAAM,CACfQ,QAAQiD,IAAI,iBAAkBlE,EAAS,EA6FFuC,UAC3BC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BH,SAAA,EACvCF,EAAAA,EAAAA,KAAA,MAAIK,UAAU,cAAaH,SAAC,cAC5BF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,UAASH,UACtBF,EAAAA,EAAAA,KAAC8B,EAAAA,GAAK,CACJC,KAAK,OACL7G,KAAK,OACL8G,YAAY,cACZ5E,MAAOpC,EAASE,KAChB+G,SAAUhF,EACViF,UAAQ,OAGZlC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,UAASH,UACtBF,EAAAA,EAAAA,KAAC8B,EAAAA,GAAK,CACJC,KAAK,QACL7G,KAAK,QACL8G,YAAY,eACZ5E,MAAOpC,EAASG,MAChB8G,SAAUhF,EACViF,UAAQ,OAGZlC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,UAASH,UACtBF,EAAAA,EAAAA,KAACmC,EAAAA,GAAU,CACTjH,KAAK,OACLkH,SAAUpG,EACViG,SAxFQ5C,IACxB,MAAMgD,GAAYC,EAAAA,EAAAA,IAAYjD,EAAMN,GAC9BwD,GAAW9C,EAAAA,EAAAA,IAAOJ,EAAM,WAC9BlD,EAAqBoG,GACrBtG,EAAgBoG,EAAU,EAqFVG,gBAAc,EACdC,oBAAkB,EAClBC,cAAe,GACfC,WAAW,UACXC,gBAAgB,qBAGpBzC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,sDAAqDH,SAAA,CACjExD,IACCsD,EAAAA,EAAAA,KAAA,OACEK,UAAU,6BACVwC,KAAK,SACLC,MAAO,CAAEC,MAAO,SAAUC,OAAQ,UAAW9C,UAE7CF,EAAAA,EAAAA,KAAA,QAAMK,UAAU,kBAAiBH,SAAC,kBAGtCF,EAAAA,EAAAA,KAACiD,EAAAA,GAAS,CACRlB,KAAK,SACLe,MAAO,CACLC,MAAO,OACPG,QAASxG,EAAS,GAAM,EACxByG,cAAezG,EAAS,OAAS,QACjCwD,SACH,qCAWnB,C","sources":["pages/User/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport MainHeader from \"../../components/Users/MainHeader\";\r\nimport Alertpopup from \"../../components/Alertpopup\";\r\nimport Alertpopupsuccess from \"../../components/Alertpopupsuccess\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Stepblock,\r\n  Titletext,\r\n  Iconblock,\r\n  Dealcontent,\r\n  SectionWrapper,\r\n  Overlay,\r\n  PopupBox,\r\n  CloseBtn,\r\n  Input,\r\n  SubmitBtn,\r\n  Wrapper,\r\n  DatePickerWrapper,\r\n  StyledIcon,\r\n} from \"../../components/Styles/RegisterStyles\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { Building, Clock, Video, Earth } from \"lucide-react\";\r\nimport { Calendar, momentLocalizer, Navigate } from \"react-big-calendar\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { format, toZonedTime } from \"date-fns-tz\";\r\nimport ModuleSideNav from \"../../components/Users/ModuleSideNav\";\r\nimport axios from \"axios\";\r\nexport default function Home() {\r\n  const navigate = useNavigate();\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [formData, setFormData] = useState({ name: \"\", email: \"\" });\r\n  const localizer = momentLocalizer(moment);\r\n  const [selectedSlots, setSelectedSlots] = useState([]);\r\n  const [ClientIP, setClientIP] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [errorMsg, seterrorMsg] = useState(\"\");\r\n  const [successMsg, setsuccessMsg] = useState(\"\");\r\n  const [selectedTime, setSelectedTime] = useState(null);\r\n  const [SelectedTimehours, setSelectedTimehours] = useState(\"\");\r\n  const [disabledButton, setdisabledButton] = useState(true);\r\n  const [currentTime, setCurrentTime] = useState(\"\");\r\n  const [moduledata, setmoduledata] = useState(\"\");\r\n  const [loader, setloader] = useState(\"\");\r\n  const { id } = useParams();\r\n  const [Descriptionvalue, setDescriptionvalue] = useState(\"\");\r\n  const apiURL = \"https://blueprintcatalyst.com/api/user/\";\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  useEffect(() => {\r\n    // Get supported time zones dynamically\r\n    if (Intl.supportedValuesOf) {\r\n      const zones = Intl.supportedValuesOf(\"timeZone\");\r\n      setTimeZones(zones);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    const getmoduledata = async () => {\r\n      let formdata = {\r\n        id: id,\r\n      };\r\n      try {\r\n        const res = await axios.post(apiURL + \"selectModule\", formdata, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        if (res.data.results.length > 0) {\r\n          setmoduledata(res.data.results[0]);\r\n        } else {\r\n          //  navigate(\"/dashboard\");\r\n        }\r\n      } catch (err) {}\r\n    };\r\n    getmoduledata();\r\n  }, [id]);\r\n  useEffect(() => {\r\n    document.title = \"Module Page\";\r\n  }, []);\r\n  const handleSelectSlot = async ({ start, end }) => {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0); // midnight today\r\n    const slotDate = new Date(start);\r\n    slotDate.setHours(0, 0, 0, 0); // compare by date only\r\n\r\n    // Check if selected date is in the past\r\n    if (slotDate < today) {\r\n      seterrorMsg(\"You cannot select a past date.\");\r\n      return; // ⛔ block past date selection\r\n    }\r\n\r\n    // Check if the selected date already exists in selectedSlots\r\n    const isDateAlreadySelected = selectedSlots.some(\r\n      (slot) => new Date(slot.start).setHours(0, 0, 0) === slotDate.getTime()\r\n    );\r\n\r\n    if (isDateAlreadySelected) {\r\n      seterrorMsg(\"You cannot select the same date multiple times.\");\r\n      return; // ⛔ block selecting the same date multiple times\r\n    }\r\n\r\n    // Check if user has already selected 3 slots\r\n    if (selectedSlots.length >= 3) {\r\n      seterrorMsg(\"You can only select up to 3 meetings.\");\r\n      return;\r\n    }\r\n\r\n    // Enable button and update selected slots\r\n    setdisabledButton(false);\r\n    const newSlot = { start, end };\r\n    const updatedSlots = [...selectedSlots, newSlot];\r\n    setSelectedSlots(updatedSlots);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getIP = async () => {\r\n      try {\r\n        const res = await fetch(\"https://api.ipify.org?format=json\");\r\n        const data = await res.json();\r\n        setClientIP(data.ip); // Save this to state\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch IP\", error);\r\n      }\r\n    };\r\n\r\n    getIP();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    let formdata = {\r\n      name: e.target.name.value,\r\n      email: e.target.email.value,\r\n      timeset: SelectedTimehours,\r\n      module_id: id,\r\n      ip_address: ClientIP,\r\n      selectedZone: selectedZone,\r\n      selectedSlots: selectedSlots,\r\n      description: Descriptionvalue,\r\n    };\r\n\r\n    setloader(true);\r\n    try {\r\n      const res = await axios.post(apiURL + \"registerforZoom\", formdata, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      setloader(false);\r\n      var checkdata = res.data;\r\n      if (checkdata.status === \"2\") {\r\n        setsuccessMsg(\"\");\r\n        seterrorMsg(checkdata.message);\r\n        return;\r\n      }\r\n      if (checkdata.status === \"1\") {\r\n        seterrorMsg(\"\");\r\n        setsuccessMsg(checkdata.message);\r\n        setShowPopup(false);\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 3000);\r\n        return;\r\n      }\r\n    } catch (err) {}\r\n    console.log(\"Form submitted\", formdata);\r\n    //setShowPopup(false);\r\n  };\r\n  const [timeZones, setTimeZones] = useState([]);\r\n  const [selectedZone, setSelectedZone] = useState(\r\n    Intl.DateTimeFormat().resolvedOptions().timeZone\r\n  );\r\n  useEffect(() => {\r\n    // Get supported time zones dynamically\r\n    if (Intl.supportedValuesOf) {\r\n      const zones = Intl.supportedValuesOf(\"timeZone\");\r\n      setTimeZones(zones);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update time whenever selectedZone changes\r\n    const updateTime = () => {\r\n      const time = new Intl.DateTimeFormat(\"en-US\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        hour12: true,\r\n        timeZone: selectedZone,\r\n      }).format(new Date());\r\n      setCurrentTime(time);\r\n    };\r\n\r\n    updateTime(); // initial\r\n    const interval = setInterval(updateTime, 60000); // update every minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, [selectedZone]);\r\n  const handleTimeChange = (time) => {\r\n    const zonedTime = toZonedTime(time, selectedZone); // Convert to the selected time\r\n    const timeOnly = format(time, \"hh:mm a\");\r\n    setSelectedTimehours(timeOnly);\r\n    setSelectedTime(zonedTime);\r\n  };\r\n  const now = new Date();\r\n  now.setHours(0, 0, 0, 0); // Set time to midnight for date-only comparison\r\n\r\n  const dayPropGetter = (date) => {\r\n    const day = new Date(date);\r\n    day.setHours(0, 0, 0, 0);\r\n\r\n    if (day < now) {\r\n      return {\r\n        style: {\r\n          backgroundColor: \"#e0e0e0\", // Greyed out\r\n          pointerEvents: \"none\", // Completely disables clicking/selecting\r\n          opacity: 0.6,\r\n          cursor: \"none\",\r\n        },\r\n      };\r\n    }\r\n\r\n    return {};\r\n  };\r\n  const handledescription = (e) => {\r\n    setDescriptionvalue(e.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <Wrapper>\r\n        <div className=\"fullpage d-block\">\r\n          <MainHeader />\r\n\r\n          <SectionWrapper className=\"d-block py-5\">\r\n            <div className=\"container-lg\">\r\n              <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-3\">\r\n                  <ModuleSideNav />\r\n                </div>\r\n                <div className=\"col-md-9\">\r\n                  <form action=\"\">\r\n                    <Stepblock id=\"step5\">\r\n                      <div className=\"d-flex flex-column gap-5\">\r\n                        <Titletext> Meetings</Titletext>\r\n                        <div className=\"row gy-3\">\r\n                          <div className=\"col-md-12 text-center\"></div>\r\n                        </div>\r\n                      </div>\r\n                    </Stepblock>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </SectionWrapper>\r\n        </div>\r\n\r\n        <Overlay show={showPopup}>\r\n          <PopupBox>\r\n            <CloseBtn onClick={() => setShowPopup(false)}>×</CloseBtn>\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"d-flex flex-column gap-3\">\r\n                <h3 className=\"text-center\">Register</h3>\r\n                <div className=\"d-block\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Your Name *\"\r\n                    value={formData.name}\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"d-block\">\r\n                  <Input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Your Email *\"\r\n                    value={formData.email}\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"d-block\">\r\n                  <DatePicker\r\n                    name=\"time\"\r\n                    selected={selectedTime}\r\n                    onChange={handleTimeChange}\r\n                    showTimeSelect\r\n                    showTimeSelectOnly\r\n                    timeIntervals={15}\r\n                    dateFormat=\"h:mm aa\"\r\n                    placeholderText=\"Select Time *\"\r\n                  />\r\n                </div>\r\n                <div className=\"d-flex align-items-center justify-content-end gap-2\">\r\n                  {loader && (\r\n                    <div\r\n                      className=\"spinner-border text-danger\"\r\n                      role=\"status\"\r\n                      style={{ width: \"1.5rem\", height: \"1.5rem\" }}\r\n                    >\r\n                      <span className=\"visually-hidden\">Loading...</span>\r\n                    </div>\r\n                  )}\r\n                  <SubmitBtn\r\n                    type=\"submit\"\r\n                    style={{\r\n                      width: \"100%\",\r\n                      opacity: loader ? 0.5 : 1,\r\n                      pointerEvents: loader ? \"none\" : \"auto\",\r\n                    }}\r\n                  >\r\n                    Submit For Zoom\r\n                  </SubmitBtn>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </PopupBox>\r\n        </Overlay>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Home","useNavigate","showPopup","setShowPopup","useState","formData","setFormData","name","email","selectedSlots","setSelectedSlots","momentLocalizer","moment","ClientIP","setClientIP","message","setMessage","errorMsg","seterrorMsg","successMsg","setsuccessMsg","selectedTime","setSelectedTime","SelectedTimehours","setSelectedTimehours","disabledButton","setdisabledButton","currentTime","setCurrentTime","moduledata","setmoduledata","loader","setloader","id","useParams","Descriptionvalue","setDescriptionvalue","apiURL","handleChange","e","target","value","useEffect","Intl","supportedValuesOf","zones","setTimeZones","async","formdata","res","axios","post","headers","Accept","data","results","length","err","getmoduledata","document","title","fetch","json","ip","error","console","getIP","timeZones","selectedZone","setSelectedZone","DateTimeFormat","resolvedOptions","timeZone","updateTime","time","hour","minute","hour12","format","Date","interval","setInterval","clearInterval","now","setHours","_jsx","_Fragment","children","_jsxs","Wrapper","className","MainHeader","SectionWrapper","ModuleSideNav","action","Stepblock","Titletext","Overlay","show","PopupBox","CloseBtn","onClick","onSubmit","preventDefault","timeset","module_id","ip_address","description","checkdata","status","setTimeout","window","location","reload","log","Input","type","placeholder","onChange","required","DatePicker","selected","zonedTime","toZonedTime","timeOnly","showTimeSelect","showTimeSelectOnly","timeIntervals","dateFormat","placeholderText","role","style","width","height","SubmitBtn","opacity","pointerEvents"],"sourceRoot":""}